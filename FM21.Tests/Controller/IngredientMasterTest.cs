using FluentValidation.TestHelper;
using FM21.API.Controllers;
using FM21.Core;
using FM21.Core.Localization;
using FM21.Core.Model;
using FM21.Core.Validator;
using FM21.Entities;
using FM21.Service;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Localization;
using Moq;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Threading.Tasks;

namespace FM21.Tests
{
    [TestFixture]
    public class IngredientMasterTest
    {
        private Mock<IIngredientMasterService> ingredientMasterService;
        private IngredientMasterController ingredientMasterController;
        private IStringLocalizer localizer;
        private IngredientMasterValidator validatorIngredient;
        private DataTable dtIngredientData;

        [SetUp]
        public void SetUp()
        {
            localizer = new JsonStringLocalizer();
            ingredientMasterService = SetupIngredientMasterRepository();
            validatorIngredient = new IngredientMasterValidator(localizer);
            dtIngredientData = GetIngredientMockDataTable();
        }

        [Test]
        public async Task Should_Return_All_IngredientCategory_Records()
        {
            var returnObject = new GeneralResponse<ICollection<IngredientCategoryMaster>>() { Data = new Collection<IngredientCategoryMaster>() };
            returnObject.Data.Add(new IngredientCategoryMaster()
            {
                IngredientCategoryID = 1, IngredientCategoryCode = "11", CreatedBy=8888, 
                CreatedOn=DateTime.Now, IngredientCategoryDescription="", IngredientCategoryGeneralDescription="", IsActive=true,IsDeleted=false,
                IsSubAssemblyCategory=true, UpdatedBy=8888,UpdatedOn=DateTime.Now
            });
            returnObject.Data.Add(new IngredientCategoryMaster() { IngredientCategoryID = 2, IngredientCategoryCode = "22",
                CreatedBy = 8888,
                CreatedOn = DateTime.Now,
                IngredientCategoryDescription = "",
                IngredientCategoryGeneralDescription = "",
                IsActive = true,
                IsDeleted = false,
                IsSubAssemblyCategory = true,
                UpdatedBy = 8888,
                UpdatedOn = DateTime.Now
            });

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetAllIngredientCategory()).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetAllIngredientCategory() as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(returnObject.Data, ((GeneralResponse<ICollection<IngredientCategoryMaster>>)response.Value).Data);
            Assert.AreEqual(returnObject.Data.Count, ((GeneralResponse<ICollection<IngredientCategoryMaster>>)response.Value).Data.Count);
            Assert.AreEqual(returnObject.Result, ((GeneralResponse<ICollection<IngredientCategoryMaster>>)response.Value).Result);
        }

        [Test]
        public async Task Should_Return_All_AlertMaster_Records()
        {
            var returnObject = new GeneralResponse<ICollection<AlertMaster>>() { Data = new Collection<AlertMaster>() };
            returnObject.Data.Add(new AlertMaster() { AlertID = 1, AlertType = "Exclusive", AlertDescription = "desc 1", AlertCode="CC", CreatedBy=1, CreatedOn=DateTime.Now, IsActive=true, IsDeleted=false,UpdatedBy=1,UpdatedOn=DateTime.Now });
            returnObject.Data.Add(new AlertMaster() { AlertID = 2, AlertType = "Exclusive", AlertDescription = "desc 2", AlertCode = "CC", CreatedBy = 1, CreatedOn = DateTime.Now, IsActive = true, IsDeleted = false, UpdatedBy = 1, UpdatedOn = DateTime.Now });

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetAlertMasterData("Exclusive")).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetAlertMasterData("Exclusive") as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(returnObject.Data, ((GeneralResponse<ICollection<AlertMaster>>)response.Value).Data);
            Assert.AreEqual(returnObject.Data.Count, ((GeneralResponse<ICollection<AlertMaster>>)response.Value).Data.Count);
            Assert.AreEqual(returnObject.Result, ((GeneralResponse<ICollection<AlertMaster>>)response.Value).Result);
        }

        [Test]
        public async Task Should_Return_Get_AutoGenerated_JDECode()
        {
            var returnObject = new GeneralResponse<string>() { Data = "R1100001" };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetAutoGeneratedJDECode(11)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetAutoGeneratedJDECode(11) as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(returnObject.Data, ((GeneralResponse<string>)response.Value).Data);
            Assert.AreEqual(returnObject.Result, ((GeneralResponse<string>)response.Value).Result);
        }

        [Test]
        public async Task Should_Return_Get_AutoGenerated_S30Code()
        {
            var returnObject = new GeneralResponse<string>() { Data = "R1110001" };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetAutoGeneratedS30Code(1, 11)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetAutoGeneratedS30Code(1, 11) as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(returnObject.Data, ((GeneralResponse<string>)response.Value).Data);
            Assert.AreEqual(returnObject.Result, ((GeneralResponse<string>)response.Value).Result);
        }

        [Test]
        public async Task Should_Return_Get_AutoGenerated_RAndDCode()
        {
            var returnObject = new GeneralResponse<Dictionary<string, string>>() { Data = new Dictionary<string, string>() };
            returnObject.Data.Add(CodeType.Research_J.ToString(), "J0001");
            returnObject.Data.Add(CodeType.Research_K.ToString(), "K0001");
            returnObject.Data.Add(CodeType.Research_V.ToString(), "V0001");
            returnObject.Data.Add(CodeType.Research_RF.ToString(), "RF0001");

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetAutoGeneratedRAndDCode()).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetAutoGeneratedRAndDCode() as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(returnObject.Data, ((GeneralResponse<Dictionary<string, string>>)response.Value).Data);
            Assert.AreEqual(returnObject.Result, ResultType.Success);
        }

        [Test]
        public async Task Should_Return_Check_CodeIsExist()
        {
            var returnObject = new GeneralResponse<int>() { Data = 0 };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.CheckCodeIsExist("J0001")).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.CheckCodeIsExist("J0001") as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(returnObject.Data, ((GeneralResponse<int>)response.Value).Data);
            Assert.AreEqual(returnObject.Result, ((GeneralResponse<int>)response.Value).Result);
        }

        [Test]
        public async Task Should_Create_New_Ingredient()
        {
            GeneralResponse<bool> returnObject = new GeneralResponse<bool>() { Data = true };
            var data = new IngredientModel() { Ingredient = new IngredientMasterModel() { IngredientCategoryID = 1, JDECode = "R1100001" } };
            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.SaveNewIngredient(data)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.PostIngredient(data);

            Assert.IsNotNull(response);
            Assert.AreEqual(((ResponseBase)((JsonResult)response).Value).Result, ResultType.Success);
        }

        [Test]
        public async Task Should_Update_Ingredient_When_Data_Is_Valid()
        {
            GeneralResponse<bool> returnObject = new GeneralResponse<bool>() { Data = true };
            var data = new IngredientModel() { Ingredient = new IngredientMasterModel() { IngredientID = 1, IngredientCategoryID = 1, JDECode = "R1100001" } };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.UpdateIngredient(data)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.PutIngredient(1, data);

            Assert.IsNotNull(response);
            Assert.AreEqual(((ResponseBase)((JsonResult)response).Value).Result, ResultType.Success);
        }

        [Test]
        [SetUICulture("en-us")]
        public void Should_Not_Update_Ingredient_When_Ingredient_Category_Not_Provide()
        {
            var obj = new IngredientModel() { Ingredient = new IngredientMasterModel() { ONTResearchCode = "J00001" } };
            var result = validatorIngredient.TestValidate(obj.Ingredient, "Edit,New");
            result.ShouldHaveValidationErrorFor(x => x.IngredientCategoryID);
        }

        [Test]
        [TestCase("J00001")]
        [TestCase("K00001")]
        [TestCase("V00001")]
        [TestCase("RF00001")]
        public void Should_Validate_True_When_Resource_Code_Is_Valid(string code)
        {
            var obj = new IngredientModel() { Ingredient = new IngredientMasterModel() { ONTResearchCode = code } };
            var result = validatorIngredient.TestValidate(obj.Ingredient, "Edit,New");
            result.ShouldNotHaveValidationErrorFor(x => x.ONTResearchCode);
        }

        [Test]
        [TestCase("S3000001")]
        public void Should_Validate_True_When_S30_Code_Is_Valid(string code)
        {
            var obj = new IngredientModel() { Ingredient = new IngredientMasterModel() { S30SubAssemblyCode = code } };
            var result = validatorIngredient.TestValidate(obj.Ingredient, "Edit,New");
            result.ShouldNotHaveValidationErrorFor(x => x.S30SubAssemblyCode);
        }

        [Test]
        [TestCase("R1100001")]
        public void Should_Validate_True_When_JDE_Code_Is_Valid(string code)
        {
            var obj = new IngredientModel() { Ingredient = new IngredientMasterModel() { JDECode = code } };
            var result = validatorIngredient.TestValidate(obj.Ingredient, "Edit,New");
            result.ShouldNotHaveValidationErrorFor(x => x.JDECode);
        }

        [Test]
        public async Task Should_Return_Ingredient_Data_When_Get_Record_By_Valid_PrimaryKey()
        {
            GeneralResponse<IngredientModel> returnObject = new GeneralResponse<IngredientModel>() { Data = new IngredientModel() };
            returnObject.Data.Ingredient = new IngredientMasterModel() { IngredientID = 1, IngredientCategoryID = 1, ONTResearchCode = "R1100001" };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientByIngredientID(returnObject.Data.Ingredient.IngredientID)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientByIngredientID(returnObject.Data.Ingredient.IngredientID) as JsonResult;
            var responseResult = response.Value as GeneralResponse<IngredientModel>;

            ingredientMasterService.Verify(c => c.GetIngredientByIngredientID(It.IsAny<int>()), Times.Once);
            Assert.AreEqual(returnObject.Data.Ingredient.IngredientCategoryID, responseResult.Data.Ingredient.IngredientCategoryID);
            Assert.AreEqual(returnObject.Data.Ingredient.ONTResearchCode, responseResult.Data.Ingredient.ONTResearchCode);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Return_Null_When_Get_Ingredient_Record_With_InValid_PrimaryKey()
        {
            GeneralResponse<IngredientModel> returnObject = new GeneralResponse<IngredientModel>() { Data = new IngredientModel() };
            returnObject.Data.Ingredient = new IngredientMasterModel() { IngredientID = 1, IngredientCategoryID = 1, ONTResearchCode = "R1100001" };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientByIngredientID(1)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientByIngredientID(9999) as JsonResult;

            ingredientMasterService.Verify(c => c.GetIngredientByIngredientID(It.IsAny<int>()), Times.Once);
            Assert.IsNull(response.Value);
        }

        [Test]
        public async Task Should_Return_All_Ingredient_Suppliers_When_IngredientID_Exist()
        {
            GeneralResponse<DataTable> returnObject = new GeneralResponse<DataTable>() { Data = new DataTable() };
            returnObject.Data.Columns.AddRange(new DataColumn[] 
                { 
                    new DataColumn("IngredientSupplierID", typeof(int)),
                    new DataColumn("IngredientID", typeof(int)),
                    new DataColumn("SiteID", typeof(int))
                });
            returnObject.Data.Rows.Add(1, 1, 1);
            returnObject.Data.Rows.Add(2, 1, 2);

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetSupplierByIngredientID(1)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetSupplierByIngredientID(1) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Search_And_Return_Ingredient()
        {
            PagedTableResponse< DataTable> returnObject = new PagedTableResponse<DataTable>() { Data = dtIngredientData };
            var searchFilter = new IngredientSearchFilter();

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.SearchIngredient(searchFilter)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.SearchIngredient(searchFilter) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Fetch_And_Return_Ingredient_Report_Data()
        {
            GeneralResponse<DataTable> returnObject = new GeneralResponse<DataTable>() { Data = dtIngredientData };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientReportData("WADA", string.Empty, string.Empty)).ReturnsAsync(returnObject);
            
            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientReportData("WADA", string.Empty, string.Empty) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Fetch_And_Return_Ingredient_Custom_Report_Data()
        {
            GeneralResponse<DataTable> returnObject = new GeneralResponse<DataTable>() { Data = dtIngredientData };
            var searchFilter = new IngredientReportFilter();

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientCustomReportData(searchFilter)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientCustomReportData(searchFilter) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Fetch_And_Return_Ingredient_For_Formula_Screen()
        {
            GeneralResponse<FormulaIngredientAttributes> returnObject = new GeneralResponse<FormulaIngredientAttributes>() 
            { 
                Data = new FormulaIngredientAttributes() { Attributes = dtIngredientData } 
            };
            var searchFilter = new IngredientReportFilter();

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientForFormula(searchFilter)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientForFormula(searchFilter) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Return_All_Nutrients_When_IngredientID_Exist()
        {
            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetNutrientByIngredientID(1) as JsonResult;
            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Delete_Ingredient()
        {
            var returnObject = new GeneralResponse<bool>();

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.DeleteIngredient(1)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);

            var response = await ingredientMasterController.DeleteIngredient(1) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Should_Give_Warning_When_Delete_Ingredient_With_Invalid_ID()
        {
            var returnObject = new GeneralResponse<bool>();

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.DeleteIngredient(1)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);

            var response = await ingredientMasterController.DeleteIngredient(2) as JsonResult;

            Assert.IsNull(response.Value);
        }

        [Test]
        public async Task Should_Update_Ingredient_Search_History()
        {
            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.UpdateIngredientSearchHistory(1, "test")).ReturnsAsync(new GeneralResponse<bool>());
           
            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.UpdateIngredientSearchHistory(1, "test") as JsonResult;

            Assert.IsNotNull(response);
            Assert.AreEqual(((GeneralResponse<bool>)response.Value).Result, ResultType.Success);
        }

        [Test]
        public async Task Should_Return_Ingredient_Search_History()
        {
            var ingredientSearchHistoryData = new GeneralResponse<ICollection<IngredientSearchHistory>>();
            ingredientSearchHistoryData.Data = GetIngredientSearchHistoryMockData();

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientSearchHistory(1)).ReturnsAsync(ingredientSearchHistoryData);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientSearchHistory(1) as JsonResult;

            Assert.IsNotNull(response);
            Assert.Greater(((GeneralResponse<ICollection<IngredientSearchHistory>>)response.Value).Data.Count, 0);
            Assert.AreEqual(((GeneralResponse<ICollection<IngredientSearchHistory>>)response.Value).Result, ResultType.Success);
        }

        [Test]
        public async Task Should_Return_Ingredient_Part_Info()
        {
            GeneralResponse<DataTable> returnObject = new GeneralResponse<DataTable>() { Data = new DataTable() };

            ingredientMasterService = new Mock<IIngredientMasterService>();
            ingredientMasterService.Setup(t => t.GetIngredientPartInfo(1)).ReturnsAsync(returnObject);

            ingredientMasterController = new IngredientMasterController(ingredientMasterService.Object);
            var response = await ingredientMasterController.GetIngredientPartInfo(1) as JsonResult;

            Assert.IsNotNull(response);
            Assert.That((response.Value as ResponseBase).Result, Is.EqualTo(ResultType.Success));
        }

        #region Setup Mock Data
        private Mock<IIngredientMasterService> SetupIngredientMasterRepository()
        {
            var repo = new Mock<IIngredientMasterService>();
           
            var response = GetNutrientByIngredientIDMockData();
            repo.Setup(t => t.GetNutrientByIngredientID(1)).ReturnsAsync(response);
            return repo;
        }

        private GeneralResponse<DataTable> GetNutrientByIngredientIDMockData()
        {
            var response = new GeneralResponse<DataTable>();
            response.Data = GetNutrientByIngredientID();
            return response;
        }

        private DataTable GetNutrientByIngredientID()
        {
            DataTable table = new DataTable();
            table.Columns.Add("NutrientID", typeof(int));
            table.Columns.Add("Name", typeof(string));
            table.Columns.Add("NutrientTypeID", typeof(int));
            table.Columns.Add("TypeName", typeof(string));
            table.Columns.Add("UnitOfMeasurementID", typeof(int));
            table.Columns.Add("MeasurementUnit", typeof(string));

            table.Columns.Add("IsMandatory", typeof(bool));
            table.Columns.Add("IsShowOnTarget", typeof(bool));
            table.Columns.Add("DisplayColumnOrder", typeof(int));
            table.Columns.Add("DisplayItemOrder", typeof(int));
            table.Columns.Add("NutrientValue", typeof(decimal));
            table.Columns.Add("IngredientNutrientMapID", typeof(int));
            table.Columns.Add("DefaultValue", typeof(decimal));

            table.Rows.Add(1, "Biotin", 1, "AA", 1, "gm", 0, 0, 1, 1, null, null, null);
            table.Rows.Add(2, "Chloride", 1, "AA", 1, "gm", 0, 0, 1, 2, null, null, null);
            table.Rows.Add(3, "Biotin", 3, "CC", 1, "gm", 0, 0, 1, 3, null, null, null);
            return table;
        }

        private DataTable GetIngredientMockDataTable()
        {
            DataTable tbl = new DataTable();
            tbl.Columns.Add("IngredientID", typeof(int));
            tbl.Columns.Add("PartNumber", typeof(string));
            tbl.Columns.Add("IngredientUsed", typeof(string));
            tbl.Columns.Add("PrimaryUnitWeight", typeof(string));
            tbl.Rows.Add(11, "R1100011", "", "");
            tbl.Rows.Add(12, "R1100012", "", "");
            tbl.Rows.Add(13, "R1100013", "", "");
            return tbl;
        }

        private ICollection<IngredientSearchHistory> GetIngredientSearchHistoryMockData()
        {
            ICollection<IngredientSearchHistory> recordList = new Collection<IngredientSearchHistory>();
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 1, UserID = 1, SearchData = "test1", SearchDate = DateTime.Now });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 2, UserID = 1, SearchData = "test2", SearchDate = DateTime.Now.AddMinutes(-1) });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 3, UserID = 1, SearchData = "test3", SearchDate = DateTime.Now.AddMinutes(-2) });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 4, UserID = 1, SearchData = "test4", SearchDate = DateTime.Now.AddMinutes(-3) });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 5, UserID = 1, SearchData = "test5", SearchDate = DateTime.Now.AddMinutes(-4) });
            return recordList;
        }
        #endregion
    }
}