using FM21.Core;
using FM21.Core.Model;
using FM21.Data.Infrastructure;
using FM21.Entities;
using FM21.Service;
using Moq;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace FM21.Tests
{
    [TestFixture]
    public class IngredientMasterServiceTest : TestBase
    {
        private Mock<IRepository<IngredientCategoryMaster>> ingredientCategoryRepository;
        private Mock<IRepository<IngredientMaster>> ingredientMasterRepository;
        private Mock<IRepository<AlertMaster>> alertMasterRepository;
        private Mock<IRepository<SiteMaster>> siteMasterRepository;
        private Mock<IRepository<AutoGenerateCode>> autoGenerateCodeRepository;
        private Mock<IRepository<IngredientSupplierMapping>> ingredientSupplierMappingRepository;
        private Mock<IRepository<IngredientSitePartMapping>> ingredientSitePartMappingRepository;
        private Mock<IRepository<IngredientNutrientMapping>> ingredientNutrientMapRepository;
        private Mock<IRepository<IngredientAllergenMapping>> ingredientAllergenMappingRepository;
        private Mock<IRepository<IngredientSearchHistory>> ingredientSearchHistoryRepository;
        private Mock<IRepository<UserMaster>> userMaster;
        private IIngredientMasterService ingredientMasterService;
        List<IngredientMaster> lstIngredientMaster;
        List<IngredientNutrientMapping> lstIngredientNutrientMapping;
        List<IngredientSupplierMapping> lstIngredientSupplierModel;
        List<IngredientSitePartMapping> lstIngredientSitePartMapping;
        List<IngredientAllergenMapping> lstIngredientAllergenModel;

        [SetUp]
        public void SetUp()
        {
            ingredientMasterRepository = SetIngredientMasterRepository();
            ingredientNutrientMapRepository = SetupIngredientNutrientMappingRepository();
            autoGenerateCodeRepository = SetAutoGenerateCodeRepository();
            lstIngredientSupplierModel = GetMockDataForNewSupplierForIngredients();
            ingredientSupplierMappingRepository = SetupIngredientSupplierMappingRepository();
            ingredientSitePartMappingRepository = SetupIngredientSitePartMappingRepository();
            ingredientAllergenMappingRepository = SetupIngredientAllergenMappingRepository();
            ingredientCategoryRepository = SetupIngredientCategoryRepository();
            ingredientSearchHistoryRepository = SetupIngredientSearchHistoryRepository();
            alertMasterRepository = SetupAlertMasterRepository();
            siteMasterRepository = SetupSiteMasterRepository();
            userMaster = SetupUserMasterRepository();
            lstIngredientAllergenModel = GetMockDataForAllergenForIngredients();
            lstIngredientNutrientMapping = GetMockDataForNewNutrientForIngredients();
            lstIngredientMaster = new List<IngredientMaster>();

            ingredientMasterService = new IngredientMasterService(serviceProvider.Object, exceptionHandler.Object, mapper, unitOfWork.Object, null, 
                ingredientCategoryRepository.Object, ingredientMasterRepository.Object, alertMasterRepository.Object, siteMasterRepository.Object, 
                autoGenerateCodeRepository.Object, ingredientSupplierMappingRepository.Object, ingredientSitePartMappingRepository.Object, 
                ingredientNutrientMapRepository.Object, ingredientSearchHistoryRepository.Object, ingredientAllergenMappingRepository.Object, 
                userMaster.Object);
        }

        [Test]
        public async Task Service_Should_Auto_Generate_JDECode_When_Data_Exist()
        {
            var record = new Collection<IngredientMaster>() { new IngredientMaster() { JDECode = "R1100001" } };
            ingredientMasterRepository.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(record);
            var response = await ingredientMasterService.GetAutoGeneratedJDECode(11);

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.IsNotNull(response.Data);
            Regex regex = new Regex(@"R\d{5}");
            var result = regex.Match(response.Data);
            Assert.That(result.Success, Is.EqualTo(true));
        }
        
        [Test]
        public async Task Service_Should_Auto_Generate_JDECode_When_Data_Not_Exist()
        {
            var record = new Collection<IngredientMaster>() { };
            ingredientMasterRepository.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(record);

            var response = await ingredientMasterService.GetAutoGeneratedJDECode(11);

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.IsNotNull(response.Data);
            Regex regex = new Regex(@"R\d{5}");
            var result = regex.Match(response.Data);
            Assert.That(result.Success, Is.EqualTo(true));
            Assert.That(response.Data, Is.EqualTo("R1110001"));
        }

        [Test]
        public async Task Service_Should_Not_Generate_JDECode_When_Exception()
        {
            string prefix = "R11";
            ingredientMasterRepository.Setup(r => r.GetMany(o => o.JDECode != null && o.JDECode.StartsWith(prefix), true)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetAutoGeneratedJDECode(11);

            Assert.IsNull(response.Data);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Auto_Generate_S30Code_When_Data_Exist()
        {
            int siteID = 1;
            var record = new Collection<IngredientMaster>() { new IngredientMaster() { S30SubAssemblyCode = "S3060001" } };
            ingredientMasterRepository.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(record);
            siteMasterRepository.Setup(m => m.GetByIdAsync(siteID)).ReturnsAsync(await Task.FromResult(new SiteMaster() { S30CodePrefix = "6" }));

            var response = await ingredientMasterService.GetAutoGeneratedS30Code(siteID, 11);

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.IsNotNull(response.Data);
            Regex regex = new Regex(@"S30\d{5}");
            var result = regex.Match(response.Data);
            Assert.That(result.Success, Is.EqualTo(true));
        }

        [Test]
        public async Task Service_Should_Auto_Generate_S30Code_When_Data_Not_Exist()
        {
            int siteID = 2;
            var record = new Collection<IngredientMaster>() { };
            ingredientMasterRepository.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(record);
            siteMasterRepository.Setup(m => m.GetByIdAsync(siteID)).ReturnsAsync(await Task.FromResult(new SiteMaster() { S30CodePrefix = "5" }));
            var response = await ingredientMasterService.GetAutoGeneratedS30Code(siteID, 11);

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.IsNotNull(response.Data);
            Regex regex = new Regex(@"S30\d{5}");
            var result = regex.Match(response.Data);
            Assert.That(result.Success, Is.EqualTo(true));
            Assert.That(response.Data, Is.EqualTo("S30500001"));
        }

        [Test]
        public async Task Service_Should_Not_Generate_S30Code_When_Ingredient_Category_Is_Invalid()
        {
            int siteID = 3;
            var record = new Collection<IngredientMaster>() { };
            ingredientMasterRepository.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(record);
            siteMasterRepository.Setup(m => m.GetByIdAsync(siteID)).ReturnsAsync(await Task.FromResult(new SiteMaster() { S30CodePrefix = "6" }));
            var response = await ingredientMasterService.GetAutoGeneratedS30Code(siteID, 10);

            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.IsNull(response.Data);
            Assert.That(response.Message, Is.EqualTo(localizer["msgInvalidCatForGenerates30Code"].Value));
        }

        [Test]
        public async Task Service_Should_Not_Generate_S30Code_When_Exception()
        {
            siteMasterRepository.Setup(r => r.GetByIdAsync(1)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetAutoGeneratedS30Code(1, 11);

            Assert.IsNull(response.Data);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Not_Auto_Generate_RAndDCode_When_Exception()
        {
            autoGenerateCodeRepository.Setup(r => r.GetAllAsync(true)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetAutoGeneratedRAndDCode();

            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Auto_Generate_RAndDCode_When_Data_Exist()
        {
            var recordList = GetAutoGenerateCodeMockData();
            autoGenerateCodeRepository.Setup(r => r.GetAllAsync(true)).ReturnsAsync(recordList);
            var response = await ingredientMasterService.GetAutoGeneratedRAndDCode();

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.IsNotNull(response.Data);

            Assert.AreEqual(4, response.Data.Count);
            
            Regex regex = new Regex(@"J\d{4}");
            var match = regex.Match(response.Data[CodeType.Research_J.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_J.ToString()]));

            regex = new Regex(@"K\d{4}");
            match = regex.Match(response.Data[CodeType.Research_K.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_K.ToString()]));

            regex = new Regex(@"V\d{4}");
            match = regex.Match(response.Data[CodeType.Research_V.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_V.ToString()]));

            regex = new Regex(@"RF\d{4}");
            match = regex.Match(response.Data[CodeType.Research_RF.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_RF.ToString()]));

            Assert.That("J0002", Is.EqualTo(response.Data[CodeType.Research_J.ToString()]));
            Assert.That("K0002", Is.EqualTo(response.Data[CodeType.Research_K.ToString()]));
            Assert.That("V0002", Is.EqualTo(response.Data[CodeType.Research_V.ToString()]));
            Assert.That("RF0002", Is.EqualTo(response.Data[CodeType.Research_RF.ToString()]));
        }

        [Test]
        public async Task Service_Should_Auto_Generate_RAndDCode_When_Data_Not_Exist()
        {
            var recordList = new Collection<AutoGenerateCode>();
            autoGenerateCodeRepository.Setup(r => r.GetAllAsync(true)).ReturnsAsync(recordList);
            var response = await ingredientMasterService.GetAutoGeneratedRAndDCode();

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.IsNotNull(response.Data);

            Assert.AreEqual(4, response.Data.Count);

            Regex regex = new Regex(@"J\d{4}");
            var match = regex.Match(response.Data[CodeType.Research_J.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_J.ToString()]));

            regex = new Regex(@"K\d{4}");
            match = regex.Match(response.Data[CodeType.Research_K.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_K.ToString()]));

            regex = new Regex(@"V\d{4}");
            match = regex.Match(response.Data[CodeType.Research_V.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_V.ToString()]));

            regex = new Regex(@"RF\d{4}");
            match = regex.Match(response.Data[CodeType.Research_RF.ToString()]);
            Assert.That(match.Value, Is.EqualTo(response.Data[CodeType.Research_RF.ToString()]));

            Assert.That("J0001", Is.EqualTo(response.Data[CodeType.Research_J.ToString()]));
            Assert.That("K0001", Is.EqualTo(response.Data[CodeType.Research_K.ToString()]));
            Assert.That("V0001", Is.EqualTo(response.Data[CodeType.Research_V.ToString()]));
            Assert.That("RF0001", Is.EqualTo(response.Data[CodeType.Research_RF.ToString()]));
        }

        [Test]
        public async Task Service_Should_Return_True_When_Code_Is_Already_Exist()
        {
            string code = "R1100001";
            var returnObjectIngredient = new IngredientMaster[] { new IngredientMaster() { IngredientID = 1 } };
            var returnObjectPartNumber = new IngredientSitePartMapping[] { new IngredientSitePartMapping() { IngredientID = 1 } };
            ingredientMasterRepository.Setup(r => r.GetMany(o => o.JDECode == code || o.S30SubAssemblyCode == code || o.ONTResearchCode == code || o.ANJResearchCode == code, true)).Returns(returnObjectIngredient);
            ingredientSitePartMappingRepository.Setup(m => m.GetMany(o => o.PartNumber == code, true)).Returns(returnObjectPartNumber);

            var response = await ingredientMasterService.CheckCodeIsExist("R1100001");

            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.Greater(response.Data, 0);
            Assert.That(response.Message, Is.EqualTo(localizer["msgDuplicateRecord", new string[] { "Code" }].Value));
        }

        [Test]
        public async Task Service_Should_Return_Validation_Message_When_Code_Is_Empty_Or_Null()
        {
            string code = "";
            var response = await ingredientMasterService.CheckCodeIsExist(code);

            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.That(response.Message, Is.EqualTo("Code " + localizer["msgCouldNotBeNullOrEmpty"].Value));
        }

        [Test]
        public async Task Service_Should_Return_Validation_Message_When_JDECode_OR_S30SubAssemblyCode_OR_ONTResearchCode_OR_ANJResearchCode_Already_Exist()
        {
            string code = "R1100001";
            var ingrMaster = SetIngredientMasterMockData();
            List<IngredientMaster> ingrMaster1 = new List<IngredientMaster>() { ingrMaster };
            ingredientMasterRepository.Setup(r => r.GetMany(o => o.JDECode == code || o.S30SubAssemblyCode == code
                                                              || o.ONTResearchCode == code || o.ANJResearchCode == code, true)).Returns(ingrMaster1);
            var response = await ingredientMasterService.CheckCodeIsExist(code);
            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.That(response.Message, Is.EqualTo(string.Format(localizer["msgDuplicateRecord"].Value, "Code")));
        }

        [Test]
        public async Task Service_Should_Return_False_When_Code_Is_Not_Exist()
        {
            string code = "R1100001";
            var returnObjectPartNumber = new IngredientSitePartMapping[] { new IngredientSitePartMapping() { IngredientID = 1 } };
            var returnObjectIngredient = new IngredientMaster[] { new IngredientMaster() { IngredientID = 1 } };
            ingredientMasterRepository.Setup(r => r.GetMany(o => o.JDECode == code || o.S30SubAssemblyCode == code || o.ONTResearchCode == code || o.ANJResearchCode == code, true)).Returns(returnObjectIngredient);
            ingredientSitePartMappingRepository.Setup(m => m.GetMany(o => o.PartNumber == code, true)).Returns(returnObjectPartNumber);

            var response = await ingredientMasterService.CheckCodeIsExist("R1100002");

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.AreEqual(0, response.Data);
        }

        [Test]
        public async Task Service_Should_Return_Error_When_Exception_In_Checking_Code()
        {
            string code = "R1100001";
            ingredientSitePartMappingRepository.Setup(m => m.GetMany(o => o.PartNumber == code, true)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.CheckCodeIsExist(code);

            Assert.AreEqual(0, response.Data);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_All_Nutrients_When_IngredientID_Exist()
        {
            var response = await ingredientMasterService.GetNutrientByIngredientID(1);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.Data.Rows.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_Nutrients_When_Exception()
        {
            ingredientMasterRepository.Setup(r => r.GetFromStoredProcedureAsync("GetNutrientByIngredientID", It.IsAny<(string, object)[]>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetNutrientByIngredientID(1);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_IngredientPartInfo()
        {
            var response = await ingredientMasterService.GetIngredientPartInfo(58806);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.Data.Rows.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_IngredientPartInfo_When_Exception()
        {
            ingredientMasterRepository.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientPartInfo", It.IsAny<(string, object)[]>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetIngredientPartInfo(999);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_All_Supplier_By_IngredientID()
        {
            var response = await ingredientMasterService.GetSupplierByIngredientID(1);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.Data.Rows.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_Supplier_When_Exception()
        {
            ingredientMasterRepository.Setup(r => r.GetFromStoredProcedureAsync("GetSupplierByIngredientID", It.IsAny<(string, object)[]>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetSupplierByIngredientID(1);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Search_And_Return_All_Active_Ingredient()
        {
            var searchFilter = new IngredientSearchFilter()
            {
                PageIndex = 1,
                PageSize = 10,
                SiteID = 0,
                DisplayColumn = string.Empty
            };
            var response = await ingredientMasterService.SearchIngredient(searchFilter);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.RowCount, 0);
        }

        [Test]
        public async Task Service_Should_Not_Search_And_Return_Data_When_Exception()
        {
            ingredientMasterRepository.Setup(r => r.GetFromStoredProcedureAsync("SearchIngredient", It.IsAny<(string, object)[]>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.SearchIngredient(new IngredientSearchFilter());
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Fetch_And_Return_Ingredient_Report_Data()
        {
            var response = await ingredientMasterService.GetIngredientReportData("Allergen", string.Empty, string.Empty);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Service_Should_Not_Return_Ingredient_Report_Data_when_Exception()
        {
            ingredientMasterRepository.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientReport", It.IsAny<(string, object)[]>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetIngredientReportData("COO", string.Empty, string.Empty);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Fetch_And_Return_Ingredient_Custom_Report_Data()
        {
            var searchReportFilter = new IngredientReportFilter() { siteIDs = "1", SupplierColumn = "PartNumber", IngredientColumn = "IngredientUsed,PrimaryUnitWeight", DBColumn = new List<string> { "IngredientUsed", "PartNumber", "PrimaryUnitWeight" } };
            var response = await ingredientMasterService.GetIngredientCustomReportData(searchReportFilter);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.Data.Rows.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_Ingredient_Custom_Report_Data_when_Exception()
        {
            var searchReportFilter = new IngredientReportFilter() { siteIDs = "1", SupplierColumn = "", IngredientColumn = "IngredientUsed", DBColumn = new List<string> { "IngredientUsed,PrimaryUnitWeight" } };
            var response = await ingredientMasterService.GetIngredientCustomReportData(searchReportFilter);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Fetch_And_Return_Ingredient_For_Formula_Data()
        {
            var searchReportFilter = new IngredientReportFilter() { siteIDs = "1", SupplierColumn = "", IngredientColumn = "", UnitMeasurment = "PrimaryUnitWeight", DBColumn = new List<string> { "PrimaryUnitWeight" } };
            var response = await ingredientMasterService.GetIngredientForFormula(searchReportFilter);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.Data.Attributes.Rows.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_Ingredient_Info_For_Formula_When_Exception()
        {
            var searchReportFilter = new IngredientReportFilter() { siteIDs = "1", SupplierColumn = "PartNumber", IngredientColumn = "PrimaryUnitWeight", NutrientColumn = "Sodium", DBColumn = new List<string> { "PartNumber", "PrimaryUnitWeight", "NutrientValue1" } };
            ingredientMasterRepository.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientForFormula", It.IsAny<(string, object)[]>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetIngredientForFormula(searchReportFilter);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Update_Ingredients_When_IngredientID_Is_Valid()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.That(response.Data.Equals(true));
        }

        [Test]
        public async Task Service_Should_Update_Ingredients_With_Delete_All_Child_Table_Info_When_Data_Not_Have()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            ingredientMasterModel.Ingredient.LACCode = string.Empty;
            ingredientMasterModel.Ingredient.ANACode = string.Empty;
            ingredientMasterModel.Ingredient.ANJCode = string.Empty;
            ingredientMasterModel.Ingredient.SLCCode = string.Empty;
            ingredientMasterModel.SupplierInfo = null;
            ingredientMasterModel.NutrientInfo = null;
            ingredientMasterModel.Ingredient.AllergenInfo = null;
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.That(response.Data.Equals(true));
        }

        [Test]
        public async Task Service_Should_Not_Update_Ingredients_When_Exception_Occured_While_Save_Part_Info()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            ingredientSitePartMappingRepository.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSitePartMapping, bool>>>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
            Assert.That(response.Data.Equals(false));
        }

        [Test]
        public async Task Service_Should_Not_Update_Ingredients_When_Exception_Occured_While_Save_Supplier_Info()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            ingredientSupplierMappingRepository.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSupplierMapping, bool>>>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
            Assert.That(response.Data.Equals(false));
        }

        [Test]
        public async Task Service_Should_Not_Update_Ingredients_When_Exception_Occured_While_Save_Nutrient_Info()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            ingredientNutrientMapRepository.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
            Assert.That(response.Data.Equals(false));
        }

        [Test]
        public async Task Service_Should_Not_Update_Ingredients_When_Exception_Occured_While_Save_Allergen_Info()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            ingredientAllergenMappingRepository.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientAllergenMapping, bool>>>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
            Assert.That(response.Data.Equals(false));
        }

        [Test]
        public async Task Service_Should_Create_New_SitePartMapping_When_IngredientSitePartMapping_Not_Exist_By_SiteId()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            IngredientSitePartMapping getIngredientSitePartMapModel = null;
            ingredientSitePartMappingRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSitePartMapping, bool>>>()))
               .Returns(getIngredientSitePartMapModel);
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.That(response.Data.Equals(true));
        }

        [Test]
        public async Task Service_Should_Create_New_IngredientSupplierModel_When_IngredientSupplierModel_Not_Exist_By_IngredientSupplierID()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            IngredientSupplierMapping ingredientSupplierMapping = null;
            ingredientSupplierMappingRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSupplierMapping, bool>>>()))
               .Returns(ingredientSupplierMapping);
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.That(response.Data.Equals(true));
        }

        [Test]
        public async Task Service_Should_Create_New_IngredientAllergen_When_IngredientAllergenMapping_Not_Exist_By_IngredientID_And_AllergenID()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.AllergenInfo = new int[] { 1, 2 };
            IngredientAllergenMapping ingredientAllergenMapping = null;
            ingredientAllergenMappingRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientAllergenMapping, bool>>>()))
               .Returns(ingredientAllergenMapping);
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.That(response.Data.Equals(true));
        }

        [Test]
        public async Task Service_Should_Create_New_IngredientNutrients_When_IngredientNutrients_Not_Exist_By_IngredientNutrientID()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            IngredientNutrientMapping ingredientNutrientMapping = null;
            ingredientNutrientMapRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>()))
               .Returns(ingredientNutrientMapping);
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.That(response.Data.Equals(true));
        }

        [Test]
        public async Task Service_Should_Return_Validation_Message_On_Update_Ingredients_When_IngredientID_Is_InValid()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.IngredientID = 0;
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.AreEqual(response.ExtraData.FirstOrDefault(x => x.Key == "IngredientID").Value, localizer["msgMustBeGreaterThenZero"].Value);
        }

        [Test]
        public async Task Service_Should_Return_Validation_Message_On_Update_Ingredients_When_InValid_ONTResearchCode()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterModel.Ingredient.ONTResearchCode = "L3033";
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.AreEqual(response.ExtraData.FirstOrDefault(x => x.Key == "ONTResearchCode").Value, localizer["msgInvalidCodeFormat"].Value);
        }

        [Test]
        public async Task Service_Should_Not_Update_Ingredients_When_Exception()
        {
            var ingredientMasterModel = SetMockForUpdateNutrientForIngredients();
            ingredientMasterRepository.Setup(r => r.GetByIdAsync(It.IsAny<int>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.UpdateIngredient(ingredientMasterModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [TestCase("J0010")]
        [TestCase("K0010")]
        [TestCase("V0010")]
        [TestCase("RF0010")]
        [TestCase("")]
        public async Task Service_Should_Create_New_JDECode_S30SubAssemblyCode_ONTResearchCode_On_Save_If_Codes_Are_Already_Exist(string ontResearchCode)
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.IngredientCategoryCode = "11";

            ingredientModel.Ingredient.JDECode = "R9910001";
            ingredientModel.Ingredient.S30SubAssemblyCode = "S30100027";
            ingredientModel.Ingredient.ONTResearchCode = ontResearchCode;

            ingredientMasterRepository.Setup(r => r.Any(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(true);
            var record = new Collection<AutoGenerateCode>() { new AutoGenerateCode() { LastCodeValue = 1 } };
            autoGenerateCodeRepository.Setup(r => r.GetManyAsync(o => o.CodeType == CodeType.Research_J.ToString(), true)).ReturnsAsync(record);
            autoGenerateCodeRepository.Setup(r => r.GetManyAsync(o => o.CodeType == CodeType.Research_K.ToString(), true)).ReturnsAsync(record);
            autoGenerateCodeRepository.Setup(r => r.GetAllAsync(true)).ReturnsAsync(record);

            IngredientNutrientMapping obj = null;
            ingredientNutrientMapRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>())).Returns(obj);

            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Service_Should_Not_Create_New_Ingredient_When_Error_In_Save_AutoGenerateCode_Table()
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.IngredientCategoryCode = "11";
            ingredientModel.Ingredient.JDECode = "R9910001";
            ingredientModel.Ingredient.S30SubAssemblyCode = string.Empty;
            ingredientModel.Ingredient.ONTResearchCode = "RF0010";
            ingredientModel.Ingredient.AllergenInfo = null;
            ingredientMasterRepository.Setup(r => r.Any(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(true);
            var record = new Collection<AutoGenerateCode>() { new AutoGenerateCode() { LastCodeValue = 1 } };
            autoGenerateCodeRepository.Setup(r => r.GetAllAsync(true)).ReturnsAsync(record);
            autoGenerateCodeRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<AutoGenerateCode, bool>>>())).Throws(new Exception("something went wrong"));
            IngredientNutrientMapping obj = null;
            ingredientNutrientMapRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>())).Returns(obj);

            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
        }

        [Test]
        public async Task Service_Should_Return_Validation_Message_When_AllowCategoryId_For_S30SubAssemblyCode_Is_Not_11()
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.IngredientCategoryCode = "99";
            ingredientMasterRepository.Setup(r => r.Any(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(true);            
            IngredientNutrientMapping obj = null;
            ingredientNutrientMapRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>()))
                .Returns(obj);

            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.AreEqual(response.Message, localizer["msgSomethingWentWrong"].Value);
        }

        [Test]
        public async Task Service_Should_Return_Validation_Message_On_Save_Ingredients_When_InValid_ONTResearchCode()
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.ONTResearchCode = "L3033";
            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Warning));
            Assert.AreEqual(response.ExtraData.FirstOrDefault(x => x.Key == "ONTResearchCode").Value, localizer["msgInvalidCodeFormat"].Value);
        }

        [Test]
        public async Task Service_Should_Create_New_Ingredient_And_Insert_Last_ResearchCode_In_AutoGenerateCode_Table()
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.IngredientCategoryCode = "11";
            ingredientModel.Ingredient.ONTResearchCode = "V0010";
            AutoGenerateCode t = null;
            autoGenerateCodeRepository.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<AutoGenerateCode, bool>>>())).Returns(t);

            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Service_Should_Not_Save_Ingredients_When_Exception()
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.IngredientCategoryCode = "11";
            ingredientModel.Ingredient.JDECode = "R9910099";
            ingredientMasterRepository.Setup(r => r.AddAsync(It.IsAny<IngredientMaster>())).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Not_Save_Ingredients_When_Exception_In_Generating_Ingredient_Object()
        {
            var ingredientModel = SetMockDataForSaveIngredient();
            ingredientModel.Ingredient.IngredientCategoryCode = "99";
            ingredientModel.Ingredient.JDECode = "R9910099";
            ingredientCategoryRepository.Setup(r => r.Query(true)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.SaveNewIngredient(ingredientModel);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Delete_Ingredient_When_PrimaryKey_Valid()
        {
            var response = await ingredientMasterService.DeleteIngredient(1);
            Assert.AreEqual(response.Result, ResultType.Success);
        }

        [Test]
        public async Task Service_Should_Not_Delete_Ingredient_When_PrimaryKey_InValid()
        {
            var response = await ingredientMasterService.DeleteIngredient(99);

            Assert.AreEqual(response.Result, ResultType.Warning);
            Assert.AreEqual(response.Message, localizer["msgRecordNotExist", new string[] { "Ingredient" }].Value);
        }

        [Test]
        public async Task Service_Should_Delete_Ingredient_When_Exception()
        {
            ingredientMasterRepository.Setup(r => r.GetByIdAsync(1)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.DeleteIngredient(1);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_All_Ingredient_Category()
        {
            var ingredientsCategory = await ingredientMasterService.GetAllIngredientCategory();
            Assert.That(ingredientsCategory.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(ingredientsCategory.Data.Count, 0);
        }

        [Test]
        public async Task Service_Should_Return_Not_Ingredient_Category_When_Exception()
        {
            ingredientCategoryRepository.Setup(r => r.GetManyAsync(o => o.IsActive && !o.IsDeleted, true)).Throws(new Exception("something went wrong"));
            var ingredientsCategory = await ingredientMasterService.GetAllIngredientCategory();
            Assert.That(ingredientsCategory.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_All_AlertMaster_By_AlertType()
        {
            string alertType = "USAGEALERT";
            var alertMaster = await ingredientMasterService.GetAlertMasterData(alertType);
            Assert.That(alertMaster.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(alertMaster.Data.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_AlertMaster_When_Exception()
        {
            string alertType = "usagealert";
            alertMasterRepository.Setup(r => r.GetManyAsync(o => o.IsActive && !o.IsDeleted && o.AlertType.ToLower() == alertType, true)).Throws(new Exception("something went wrong"));
            var alertMaster = await ingredientMasterService.GetAlertMasterData(alertType);
            Assert.That(alertMaster.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_Blank_Ingredient_Model_When_IngredientID_Is_Zero()
        {
            var response = await ingredientMasterService.GetIngredientByIngredientID(0);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.AreEqual(0, response.Data.Ingredient.IngredientID);
        }

        [Test]
        public async Task Service_Should_Return_Not_Ingredient_When_Pass_Invalid_IngredientID()
        {
            var response = await ingredientMasterService.GetIngredientByIngredientID(999);
            Assert.IsNull(response.Data);
            Assert.AreEqual(response.Message, localizer["msgRecordNotExist", new string[] { "Ingredient" }].Value);
        }

        [Test]
        public async Task Service_Should_Return_Ingredient_By_IngredientID_When_AlertReview_And_ExclusivityAlert_NotExist()
        {
            var ingredientMaster = await ingredientMasterService.GetIngredientByIngredientID(1);
            Assert.That(ingredientMaster.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(ingredientMaster.Data.Ingredient.IngredientID, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_Ingredient_When_Exception()
        {
            ingredientMasterRepository.Setup(r => r.Query(true)).Throws(new Exception("something went wrong"));
            var ingredientMaster = await ingredientMasterService.GetIngredientByIngredientID(1);
            Assert.That(ingredientMaster.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public async Task Service_Should_Return_User_Ingredient_Search_History()
        {
            var response = await ingredientMasterService.GetIngredientSearchHistory(1);
            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
            Assert.Greater(response.Data.Count, 0);
        }

        [Test]
        public async Task Service_Should_Not_Return_Ingredient_Search_History_When_Exception()
        {
            int userID = 99;
            ingredientSearchHistoryRepository.Setup(r => r.GetManyAsync(o => o.UserID == userID, true)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.GetIngredientSearchHistory(userID);
            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        [TestCase("test2")]
        [TestCase("test6")]
        public async Task Service_Should_Save_New_Search_History(string searchData)
        {
            var response = await ingredientMasterService.UpdateIngredientSearchHistory(1, searchData);

            Assert.That(response.Result, Is.EqualTo(ResultType.Success));
        }

        [Test]
        public async Task Service_Should_Note_Save_New_Search_History_When_Exception()
        {
            int userID = 1;
            ingredientSearchHistoryRepository.Setup(r => r.GetMany(o => o.UserID == userID, true)).Throws(new Exception("something went wrong"));
            var response = await ingredientMasterService.UpdateIngredientSearchHistory(1, string.Empty);

            Assert.That(response.Result, Is.EqualTo(ResultType.Error));
        }

        [Test]
        public void Service_Should_Pass_Value_To_Properties_Of_AutoGenerateCode()
        {
            AutoGenerateCode Data = new AutoGenerateCode()
            {
                LastCodeValue = 1,
                CodeID = 1,
                CodeType = CodeType.Research_J.ToString()
            };
            Assert.IsNotNull(Data);
        }
        
        [Test]
        public void Service_Should_Pass_Value_To_Properties_Of_IngredientAllergenMapping_Entities()
        {
            IngredientAllergenMapping Data = new IngredientAllergenMapping()
            {
                AllergenID = 1,
                IngredientID = 1,
                CreatedBy = 8888,
                CreatedOn = DateTime.Now,
                IngredientAllergenMapID = 0,
                UpdatedBy = null,
                UpdatedOn = null,
                Allergen = new AllergenMaster(),
                Ingredient = new IngredientMaster(),
            };
            Assert.IsNotNull(Data);
        }

        #region Setup Mock Data
        private IngredientModel SetMockForUpdateNutrientForIngredients()
        {
            IngredientModel objIngredientModel = new IngredientModel();
            objIngredientModel.Ingredient = GetIngredientMasterModel();
            objIngredientModel.Ingredient.IngredientID = 1;
            objIngredientModel.NutrientInfo = new List<NutrientModel>();
            objIngredientModel.SupplierInfo = new List<IngredientSupplierModel>();
            objIngredientModel.NutrientInfo.Add(GetNutrientModel());
            objIngredientModel.SupplierInfo.Add(GetSupplierModel());
            return objIngredientModel;
        }

        private IngredientMaster SetIngredientMasterMockData()
        {
            IngredientMaster ingredientMaster = new IngredientMaster()
            {
                IngredientID = 1,
                GeneralNote = "use for Abott",
                JDECode = "R11000002",
                S30SubAssemblyCode = "S3060001",
                GeneralRMDescription = "",
                IsAllergenPendingDocument = false
            };
            return ingredientMaster;
        }

        private IngredientModel SetMockDataForSaveIngredient()
        {
            IngredientModel ingredientModel = new IngredientModel();
            ingredientModel.Ingredient = GetIngredientMasterModel();
            ingredientModel.NutrientInfo = new List<NutrientModel>();
            ingredientModel.NutrientInfo.Add(GetNutrientModel());
            ingredientModel.SupplierInfo = new List<IngredientSupplierModel>() { new IngredientSupplierModel() { BrokerID = 1 } };
            ingredientModel.Ingredient.AllergenInfo = new int[] { 1 };
            return ingredientModel;
        }

        private IngredientMasterModel GetIngredientMasterModel()
        {
            IngredientMasterModel ingredientMasterModel = new IngredientMasterModel()
            {
                IngredientID = 0,
                IRWPart = "LAC",
                ANJResearchCode = "K5767",

                ONTResearchCode = "J3302",
                S30SubAssemblyCode = "S3060001",
                JDECode = "R1100001",
                IngredientUsed = "LAC",
                RMDescription = "LAC",
                OriginCountry = "LAC",
                Viscosity = "0.225",
                Microns = "0.225",
                HACCPRisk = null,
                IngredientBreakDown = "LAC",
                IngredientList = "LAC",
                InternalXReference = "LAC",
                ExternalXReference = "LAC",
                Sulfites = Convert.ToDecimal(0.225),
                OptimumStorageCondition = "LAC",
                GeneralNote = "Amy 6-13-19  Propylene glycol 82-87%, natural flavor 12-17%",
                AltCode = "LAC",
                IngredientCategoryID = 31,
                NutrientLink = "LAC",
                NutrientDescription = "LAC",
                DataSourceNote = "LAC",
                StorageCode = "LAC",
                PreConditionCode = "LAC",
                StorageInformation = "LAC",
                IPPBagSize = "LAC",
                AlertReview = "11",
                UsageAlert = "7",
                ExclusivityAlert = "7,8",
                AlertCustomerAbbr = "Pepsico",
                Vegetarian = "LAC",
                Vegan = "LAC",
                RSPOCertificateNumber = "LAC",
                GMOStatus = "nonGMO",
                AllergenNote = "none\\",
                HighRiskCrossContSpecies = "none\\",
                PrimaryUnitWeight = 2.5m,
                UnitOfMeasurementID = 1,
                CFRReferenceNo = "CFRReferenceNo",
                GRASNo = "LAC",
                HTSNo = "LAC",
                ShakleeCode = "LAC",
                CASNumber = "LAC",
                SupplierNote = "LAC",
                Biological = "LAC",
                Chemical = "LAC",
                Physical = "LAC",
                ControlMechanismBiological = "LAC",
                ControlMechanismPhysical = "LAC",
                ControlMachanismChemical = "LAC",
                Micro = "LAC",
                ForeignMatter = "LAC",
                FSApproval = null,
                TGApproval = "LAC",
                PackageOption = "LAC",
                SupplierPackage = "LAC",
                ProcurementDetail = "LAC",
                HandSort = "LAC",
                UsageBarLimit = "LAC",
                UsagePowderLimit = "LAC",
                UsageCanadaLimit = "LAC",
                LACCode = "J0001",
                GeneralRMDescription = "",
                IsAllergenPendingDocument = false,
                ANJCode = "R9910010",
                ANACode = "R9910010",
                SLCCode = "R9910010",
            };
            return ingredientMasterModel;
        }

        private DataTable GetIngredientMockDataTable()
        {
            DataTable table = new DataTable();
            table.Columns.Add("IngredientID", typeof(int));
            table.Columns.Add("PartNumber", typeof(string));
            table.Columns.Add("IngredientUsed", typeof(string));
            table.Columns.Add("PrimaryUnitWeight", typeof(string));
            table.Columns.Add("UOM", typeof(string));
            table.Columns.Add("ONT_PartNumber", typeof(string));
            table.Columns.Add("ONT_Price", typeof(decimal));
            table.Columns.Add("NutrientActivity", typeof(string));
            table.Columns.Add("CalTotal", typeof(decimal));
            table.Columns.Add("ClaimAmountUnit", typeof(string));
            table.Columns.Add("Allergen", typeof(string));
            table.Columns.Add("DvOfActiveNutrient", typeof(decimal));
            table.Columns.Add("IsDVValue", typeof(bool));
            for (int i = 1; i <= 15; i++)
            {
                table.Columns.Add("NutrientValue" + i, typeof(decimal));
            }
            table.Rows.Add(1, "R1100001");
            table.Rows.Add(2, "R1100002");
            table.Rows.Add(3, "R1100003");
            return table;
        }
        #endregion

        #region Setup - IngredientMaster Repository
        private Mock<IRepository<IngredientMaster>> SetIngredientMasterRepository()
        {
            var repo = new Mock<IRepository<IngredientMaster>>();
            var ingrMaster = SetIngredientMasterMockData();
            var ingredientModel = SetMockForUpdateNutrientForIngredients();
            DataTable dtIngredient = GetIngredientMockDataTable();
            DataTable dt = GetNutrientByIngredientID();
            DataTable dtPartInfo = GetIngredientPartInfo();
            repo.Setup(r => r.GetByIdAsync(ingredientModel.Ingredient.IngredientID)).ReturnsAsync(ingrMaster);
            repo.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientMaster, bool>>>())).Returns(new Collection<IngredientMaster>() { ingrMaster });
            repo.Setup(r => r.AddAsync(It.IsAny<IngredientMaster>()))
             .Callback(new Action<IngredientMaster>(ingredientMaster =>
             {
                 dynamic nextIngredientID = GetIngredientMasterModel().IngredientID + 1;
                 ingredientMaster.CreatedOn = DateTime.Now;
                 lstIngredientMaster.Add(ingredientMaster);

                 ingredientMaster.IngredientNutrientMapping.ToList().ForEach(ingNutrientMap =>
                 {
                     ingNutrientMap.IngredientID = nextIngredientID;
                     lstIngredientNutrientMapping.Add(ingNutrientMap);
                 });
                 ingredientMaster.IngredientSupplierMapping.ToList().ForEach(ingSupplierMap =>
                 {
                     ingSupplierMap.IngredientID = nextIngredientID;
                     lstIngredientSupplierModel.Add(ingSupplierMap);
                 });
             }));
            var getIngredientMasterData = GetIngredientMasterMockPagedData();
            IQueryable<IngredientMaster> queryableRegulatory = getIngredientMasterData.Data.AsQueryable();
            repo.Setup(r => r.Query(true)).Returns(queryableRegulatory);
            var searchFilter = new IngredientSearchFilter()
            {
                PageIndex = 1,
                PageSize = 10,
                SiteID = 0,
                DisplayColumn = string.Empty
            };
            repo.Setup(r => r.GetFromStoredProcedureAsync("GetNutrientByIngredientID", new Tuple<string, object>("ingredientID", 1).ToValueTuple())).ReturnsAsync(dt);
            repo.Setup(r => r.GetFromStoredProcedureAsync("GetSupplierByIngredientID", new Tuple<string, object>("ingredientID", 1).ToValueTuple())).ReturnsAsync(GeSupplierByIngredientID());
            repo.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientReportData",
                               new Tuple<string, object>("reportType", "Allergen").ToValueTuple(),
                               new Tuple<string, object>("siteIDs", string.Empty).ToValueTuple(),
                               new Tuple<string, object>("searchCol2", string.Empty).ToValueTuple()
                               )).ReturnsAsync(dtIngredient);
            repo.Setup(r => r.GetFromStoredProcedureAsync("SearchIngredient",
                                new Tuple<string, object>("searchCol1", searchFilter.SearchField1).ToValueTuple(),
                                new Tuple<string, object>("searchCol1Value", searchFilter.SearchText1).ToValueTuple(),
                                new Tuple<string, object>("searchCol2", searchFilter.SearchText2).ToValueTuple(),
                                new Tuple<string, object>("searchCol2Value", searchFilter.SearchField2).ToValueTuple(),
                                new Tuple<string, object>("searchCol2Condition", searchFilter.SearchCondition2).ToValueTuple(),
                                new Tuple<string, object>("searchCol3", searchFilter.SearchField3).ToValueTuple(),
                                new Tuple<string, object>("searchCol3Value", searchFilter.SearchText3).ToValueTuple(),
                                new Tuple<string, object>("searchCol3Condition", searchFilter.SearchCondition3).ToValueTuple(),
                                new Tuple<string, object>("displayColumn", searchFilter.DisplayColumn).ToValueTuple(),
                                new Tuple<string, object>("siteID", searchFilter.SiteID).ToValueTuple(),
                                new Tuple<string, object>("sortColumn", searchFilter.SortColumn).ToValueTuple(),
                                new Tuple<string, object>("sortDirection", searchFilter.SortDirection).ToValueTuple(),
                                new Tuple<string, object>("nutrientColumn", searchFilter.NutrientColumn).ToValueTuple(),
                                new Tuple<string, object>("rMSatusColumn", searchFilter.RMSatusColumn).ToValueTuple(),
                                new Tuple<string, object>("ingColumn", searchFilter.IngredientColumn).ToValueTuple(),
                                new Tuple<string, object>("ingAllergen", searchFilter.AllergenColumn).ToValueTuple(),
                                new Tuple<string, object>("supplierColumn", searchFilter.SupplierColumn).ToValueTuple(),
                                new Tuple<string, object>("unitMeasurment", searchFilter.UnitMeasurment).ToValueTuple()
                )).ReturnsAsync(dtIngredient);
            repo.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientCustomReport", It.IsAny<(string, object)[]>())).ReturnsAsync(dtIngredient);
            repo.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientForFormula", It.IsAny<(string, object)[]>())).ReturnsAsync(dtIngredient);
            repo.Setup(r => r.GetFromStoredProcedureAsync("GetIngredientPartInfo", new Tuple<string, object>("ingredientID", 58806 ).ToValueTuple())).ReturnsAsync(dtPartInfo);
            return repo;
        }
        #endregion

        #region Setup - AutoGenerateCode Repository
        private Mock<IRepository<AutoGenerateCode>> SetAutoGenerateCodeRepository()
        {
            var repo = new Mock<IRepository<AutoGenerateCode>>();
            repo.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<AutoGenerateCode, bool>>>())).Returns(new AutoGenerateCode());

            return repo;
        }

        private ICollection<AutoGenerateCode> GetAutoGenerateCodeMockData()
        {
            var data = new Collection<AutoGenerateCode>()
            {
                new AutoGenerateCode(){ CodeType = CodeType.Research_J.ToString(), LastCodeValue = 1 },
                new AutoGenerateCode(){ CodeType = CodeType.Research_K.ToString(), LastCodeValue = 1 },
                new AutoGenerateCode(){ CodeType = CodeType.Research_V.ToString(), LastCodeValue = 1 },
                new AutoGenerateCode(){ CodeType = CodeType.Research_RF.ToString(), LastCodeValue = 1 }
            };
            return data;
        }
        #endregion

        #region Setup - Nutrient Repository
        private DataTable GetNutrientByIngredientID()
        {
            DataTable table = new DataTable();
            table.Columns.Add("NutrientID", typeof(int));
            table.Columns.Add("Name", typeof(string));
            table.Columns.Add("NutrientTypeID", typeof(int));
            table.Columns.Add("TypeName", typeof(string));
            table.Columns.Add("UnitOfMeasurementID", typeof(int));
            table.Columns.Add("MeasurementUnit", typeof(string));
            table.Columns.Add("IsMandatory", typeof(bool));
            table.Columns.Add("IsShowOnTarget", typeof(bool));
            table.Columns.Add("DisplayColumnOrder", typeof(int));
            table.Columns.Add("DisplayItemOrder", typeof(int));
            table.Columns.Add("NutrientValue", typeof(decimal));
            table.Columns.Add("IngredientNutrientMapID", typeof(int));
            table.Columns.Add("DefaultValue", typeof(decimal));

            table.Rows.Add(1, "Biotin", 1, "AA", 1, "gm", 0, 0, 1, 1, null, null, null);
            table.Rows.Add(2, "Chloride", 1, "AA", 1, "gm", 0, 0, 1, 2, null, null, null);
            table.Rows.Add(3, "Biotin", 3, "CC", 1, "gm", 0, 0, 1, 3, null, null, null);
            return table;
        }

        private List<IngredientNutrientMapping> GetMockDataForNewNutrientForIngredients()
        {
            List<IngredientNutrientMapping> lstIngredientNutrient = new List<IngredientNutrientMapping>();
            lstIngredientNutrient.Add(new IngredientNutrientMapping()
            {
                IngredientNutrientMapID = 1,
                IngredientID = 1,
                NutrientID = 1,
                NutrientValue = Convert.ToDecimal(00.25698745),
                CreatedBy = 8888,
                CreatedOn = DateTime.Now,
            });
            return lstIngredientNutrient;
        }

        private NutrientModel GetNutrientModel()
        {
            NutrientModel lstIngredientNutrient = new NutrientModel()
            {
                IngredientNutrientMapID = 1,
                IngredientID = 1,
                NutrientId = 1,
                NutrientValue = Convert.ToDecimal(00.25698745),
            };
            return lstIngredientNutrient;
        }

        private Mock<IRepository<IngredientNutrientMapping>> SetupIngredientNutrientMappingRepository()
        {
            var repoIngredientNutrientMapping = new Mock<IRepository<IngredientNutrientMapping>>();
            var getIngrNutrientMapModel = GetMockDataForNewNutrientForIngredients().First();
            repoIngredientNutrientMapping.Setup(r => r.AddAsync(It.IsAny<IngredientNutrientMapping>()))
             .Callback(new Action<IngredientNutrientMapping>(newcustomer =>
             {
                 dynamic maxIngredientNutrientMapID = lstIngredientNutrientMapping.Last().IngredientNutrientMapID;
                 dynamic nextIngredientNutrientMapID = maxIngredientNutrientMapID + 1;
                 newcustomer.IngredientNutrientMapID = nextIngredientNutrientMapID;
                 newcustomer.CreatedOn = DateTime.Now;
                 lstIngredientNutrientMapping.Add(newcustomer);
             }));
            repoIngredientNutrientMapping.Setup(r => r.UpdateAsync(It.IsAny<IngredientNutrientMapping>()))
             .Callback(new Action<IngredientNutrientMapping>(x =>
             {
             }));
            repoIngredientNutrientMapping.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>()))
                .Returns(getIngrNutrientMapModel);
            repoIngredientNutrientMapping.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientNutrientMapping, bool>>>()));
            return repoIngredientNutrientMapping;
        }
        #endregion

        #region Setup - Supplier Repository
        private List<IngredientSupplierMapping> GetMockDataForNewSupplierForIngredients()
        {
            List<IngredientSupplierMapping> lstIngredientNutrient = new List<IngredientSupplierMapping>();
            lstIngredientNutrient.Add(new IngredientSupplierMapping()
            {
                BrokerID = 1,
                BrokerDescription = "Interwest",
                BrokerDetail = "Interwest",
                IngredientID = 1,
                KosherAgency = "Kosher",
                ManufactureID = 1,
                ManufactureDescription = "ABCO Labs",
                ManufactureDetail = "ABCO Labs",
                IngredientSupplierID = 0
            });
            return lstIngredientNutrient;
        }

        private IngredientSupplierModel GetSupplierModel()
        {
            IngredientSupplierModel ingredientSupplierModel = new IngredientSupplierModel()
            {
                BrokerID = 1,
                BrokerDescription = "Interwest",
                BrokerDetail = "Interwest",
                IngredientID = 1,
                KosherAgency = "Kosher",
                ManufactureID = 1,
                ManufactureDescription = "ABCO Labs",
                ManufactureDetail = "ABCO Labs",
                IngredientSupplierID = 0
            };
            return ingredientSupplierModel;
        }

        private Mock<IRepository<IngredientSupplierMapping>> SetupIngredientSupplierMappingRepository()
        {
            var repo = new Mock<IRepository<IngredientSupplierMapping>>();
            var getIngrNutrientMapModel = GetMockDataForNewSupplierForIngredients().First();
            repo.Setup(r => r.AddAsync(It.IsAny<IngredientSupplierMapping>()))
             .Callback(new Action<IngredientSupplierMapping>(newSupplier =>
             {
                 dynamic maxingredientSupplierMapID = lstIngredientSupplierModel.Last().IngredientSupplierID;
                 dynamic nextIngredientSupplierMapID = maxingredientSupplierMapID + 1;
                 newSupplier.IngredientSupplierID = nextIngredientSupplierMapID;
                 newSupplier.CreatedOn = DateTime.Now;
                 lstIngredientSupplierModel.Add(newSupplier);
             }));
            repo.Setup(r => r.UpdateAsync(It.IsAny<IngredientSupplierMapping>()))
             .Callback(new Action<IngredientSupplierMapping>(x =>
             {
             }));
            repo.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSupplierMapping, bool>>>()))
                .Returns(getIngrNutrientMapModel);
            repo.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSupplierMapping, bool>>>()));
            return repo;
        }

        private DataTable GeSupplierByIngredientID()
        {
            DataTable table = new DataTable();
            table.Columns.Add("SiteID", typeof(int));
            table.Columns.Add("SiteDescription", typeof(string));
            table.Columns.Add("BrokerID", typeof(int));
            table.Columns.Add("BrokerDetail", typeof(string));
            table.Columns.Add("BrokerDescription", typeof(string));
            table.Columns.Add("ManufactureID", typeof(int));

            table.Columns.Add("ManufactureDetail", typeof(string));
            table.Columns.Add("ManufactureDescription", typeof(string));
            table.Columns.Add("KosherCodeID", typeof(int));
            table.Columns.Add("KosherAgency", typeof(string));
            table.Columns.Add("KosherExpireDate", typeof(DateTime));
            table.Columns.Add("Price", typeof(decimal));
            table.Columns.Add("QuotedDate", typeof(DateTime));

            table.Rows.Add(1, "Ontario", null, null, null, null, null, null, null, null, null, null, null);
            table.Rows.Add(2, "Lachine", null, null, null, null, null, null, null, null, null, null, null);
            table.Rows.Add(3, "Anjou", null, null, null, null, null, null, null, null, null, null, null);
            table.Rows.Add(4, "Anaheim", null, null, null, null, null, null, null, null, null, null, null);
            table.Rows.Add(5, "Salt Lake City", null, null, null, null, null, null, null, null, null, null, null);
            return table;

        }
        #endregion

        #region Setup - IngredientSitePartMapping Repository
        private List<IngredientSitePartMapping> GetMockDataForNewSitePartForIngredients()
        {
            List<IngredientSitePartMapping> lstIngredientNutrient = new List<IngredientSitePartMapping>();
            lstIngredientNutrient.Add(new IngredientSitePartMapping()
            {
                IngredientID = 1,
                IngredientSitePartMapID = 1,
                PartNumber = "J0001",
                SiteID = 1
            });
            return lstIngredientNutrient;
        }

        private Mock<IRepository<IngredientSitePartMapping>> SetupIngredientSitePartMappingRepository()
        {
            lstIngredientSitePartMapping = GetMockDataForNewSitePartForIngredients();
            var repo = new Mock<IRepository<IngredientSitePartMapping>>();
            var getIngredientSitePartMapModel = GetMockDataForNewSitePartForIngredients().First();
            repo.Setup(r => r.AddAsync(It.IsAny<IngredientSitePartMapping>()))
             .Callback(new Action<IngredientSitePartMapping>(newSitePart =>
             {
                 dynamic maxIngredientSitePartMapID = lstIngredientSitePartMapping.Last().IngredientSitePartMapID;
                 dynamic nextIngredientSitePartMapID = maxIngredientSitePartMapID + 1;
                 newSitePart.IngredientSitePartMapID = nextIngredientSitePartMapID;
                 newSitePart.CreatedOn = DateTime.Now;
                 lstIngredientSitePartMapping.Add(newSitePart);
             }));
            repo.Setup(r => r.UpdateAsync(It.IsAny<IngredientSitePartMapping>()))
             .Callback(new Action<IngredientSitePartMapping>(x =>
             {
             }));
            repo.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSitePartMapping, bool>>>()))
                .Returns(getIngredientSitePartMapModel);
            repo.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSitePartMapping, bool>>>()));
            return repo;
        }
        #endregion

        #region Setup - IngredientCategory Repository
        private Mock<IRepository<IngredientCategoryMaster>> SetupIngredientCategoryRepository()
        {

            var repo = new Mock<IRepository<IngredientCategoryMaster>>();
            List<IngredientCategoryMaster> lstIngredientCategoryMaster = GetIngredientCategoryMasterMockData();
            List<IngredientCategoryMaster> lstQuerable = GetIngredientCategoryMasterMockData();
            repo.Setup(r => r.GetManyAsync(o => o.IsActive && !o.IsDeleted, true))
                .ReturnsAsync(lstIngredientCategoryMaster);
            lstQuerable[0].IngredientCategoryCode = "99";
            repo.Setup(r => r.Query(true))
                .Returns(lstQuerable.AsQueryable());

            return repo;
        }

        private List<IngredientCategoryMaster> GetIngredientCategoryMasterMockData()
        {
            List<IngredientCategoryMaster> ingredientCategoryMasters = new List<IngredientCategoryMaster>();
            ingredientCategoryMasters.Add(new IngredientCategoryMaster()
            {
                IngredientCategoryID = 1,
                IngredientCategoryCode = "11",
                IngredientCategoryDescription = "Coatings [chocolate, yogurt, peanut, carob]",
                IngredientCategoryGeneralDescription = "Coatings",
                IsSubAssemblyCategory = false,
                IsActive = true,
                IsDeleted = false,

            });
            ingredientCategoryMasters.Add(new IngredientCategoryMaster()
            {
                IngredientCategoryID = 2,
                IngredientCategoryCode = "12",
                IngredientCategoryDescription = "Cocoa and Carob Products [cocoa powder, chocolate liquor, carob powder, cocoa replacers]",
                IngredientCategoryGeneralDescription = "Cocoa Products",
                IsSubAssemblyCategory = false,
                IsActive = true,
                IsDeleted = false,

            });
            return ingredientCategoryMasters;
        }
        #endregion

        #region Setup - AlertMaster Repository 
        private Mock<IRepository<AlertMaster>> SetupAlertMasterRepository()
        {
            var repo = new Mock<IRepository<AlertMaster>>();
            string alertType = "usagealert";
            List<AlertMaster> lstIngredientAlertMaster = GetAlertMasterMockData();
            repo.Setup(r => r.GetManyAsync(o => o.IsActive && !o.IsDeleted && o.AlertType.ToLower() == alertType, true))
                .ReturnsAsync(lstIngredientAlertMaster);
            repo.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<AlertMaster, bool>>>()))
               .Returns(lstIngredientAlertMaster);
            repo.Setup(r => r.Query(true)).Returns(lstIngredientAlertMaster.AsQueryable());
            return repo;
        }

        private List<AlertMaster> GetAlertMasterMockData()
        {
            List<AlertMaster> alertMasters = new List<AlertMaster>();
            alertMasters.Add(new AlertMaster()
            {
                AlertID = 11,
                AlertType = "DATAALERT",
                AlertCode = "N",
                AlertDescription = "N:    Nutrient Data (incl Activty and Listing)",
                IsActive = true,
                IsDeleted = false
            });
            alertMasters.Add(new AlertMaster()
            {
                AlertID = 7,
                AlertType = "USAGEALERT",
                AlertCode = "CS",
                AlertDescription = "Customer Supplied: Customer supplies Nellson with raw material at “no cost” to Nellson.",
                IsActive = true,
                IsDeleted = false
            });
            alertMasters.Add(new AlertMaster()
            {
                AlertID = 8,
                AlertType = "EXCLUSIVITYALERT",
                AlertCode = "IP",
                AlertDescription = "IP Proprietary: Customer has exclusivity with a specific material (typically flavors) involving intellectual property; customer owns the rights to the use of the material; a “non-proprietary” version is not available.",
                IsActive = true,
                IsDeleted = false
            });
            return alertMasters;
        }
        #endregion

        #region Setup - IngredientMaster Repository For Alert
        private PagedEntityResponse<IngredientMaster> GetIngredientMasterMockPagedData()
        {
            List<IngredientMaster> lst = new List<IngredientMaster>();
            var ingredientMaster = mapper.Map<IngredientMasterModel, IngredientMaster>(GetIngredientMasterModel());
            ingredientMaster.IngredientID = 1;
            ingredientMaster.CreatedBy = 1;
            ingredientMaster.CreatedOn = DateTime.Now;
            ingredientMaster.UpdatedBy = 2;
            if (ingredientMaster != null)
            {
                ingredientMaster.IngredientCategory = GetIngredientCategoryMasterMockData().FirstOrDefault(x => x.IngredientCategoryID == ingredientMaster.IngredientCategoryID);
            }

            var response = new PagedEntityResponse<IngredientMaster>();
            lst.Add(ingredientMaster);
            response.Data = lst;
            return response;
        }
        #endregion

        #region Setup - SiteMaster Repository
        private Mock<IRepository<SiteMaster>> SetupSiteMasterRepository()
        {
            var siteList = new Collection<SiteMaster>(){ new SiteMaster() { SiteID = 1, SiteCode = "ONT" } };
            var repo = new Mock<IRepository<SiteMaster>>();
            repo.Setup(m => m.GetByIdAsync(1)).Returns(GetSiteMasterMockObject());
            repo.Setup(r => r.GetMany(It.IsAny<System.Linq.Expressions.Expression<Func<SiteMaster, bool>>>(), true)).Returns(siteList);
            return repo;
        }

        private async Task<SiteMaster> GetSiteMasterMockObject()
        {
            var site = new SiteMaster() { SiteID = 1, SiteCode = "ONT", S30CodePrefix = "6" };
            return await Task.FromResult(site);
        }
        #endregion

        #region Setup - IngredientAllergenMapping
        private List<IngredientAllergenMapping> GetMockDataForAllergenForIngredients()
        {
            List<IngredientAllergenMapping> lstIngredientAllergenMapping = new List<IngredientAllergenMapping>();
            lstIngredientAllergenMapping.Add(new IngredientAllergenMapping()
            {
                AllergenID = 1,
                IngredientID = 1,
                CreatedBy = 8888,
                CreatedOn = DateTime.Now,
                IngredientAllergenMapID = 0,
                UpdatedBy = null,
                UpdatedOn = null,
                Allergen = new AllergenMaster(),
                Ingredient = new IngredientMaster()
            });
            lstIngredientAllergenMapping.Add(new IngredientAllergenMapping()
            {
                AllergenID = 2,
                IngredientID = 1,
                CreatedBy = 8888,
                CreatedOn = DateTime.Now,
                IngredientAllergenMapID = 0,
                UpdatedBy = null,
                UpdatedOn = null,
                Allergen = new AllergenMaster(),
                Ingredient = new IngredientMaster()
            });
            return lstIngredientAllergenMapping;
        }

        private Mock<IRepository<IngredientAllergenMapping>> SetupIngredientAllergenMappingRepository()
        {
            var repo = new Mock<IRepository<IngredientAllergenMapping>>();
            var getIngrNutrientMapModel = GetMockDataForAllergenForIngredients().First();
            repo.Setup(r => r.AddAsync(It.IsAny<IngredientAllergenMapping>()))
             .Callback(new Action<IngredientAllergenMapping>(newSupplier =>
             {
                 dynamic maxingredientAllergenMapID = lstIngredientAllergenModel.Last().IngredientAllergenMapID;
                 dynamic nextIngredientAllergenMapID = maxingredientAllergenMapID + 1;
                 newSupplier.IngredientAllergenMapID = nextIngredientAllergenMapID;
                 newSupplier.CreatedOn = DateTime.Now;
                 lstIngredientAllergenModel.Add(newSupplier);
             }));
            repo.Setup(r => r.UpdateAsync(It.IsAny<IngredientAllergenMapping>()))
             .Callback(new Action<IngredientAllergenMapping>(x =>
             {
             }));
            repo.Setup(r => r.Get(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientAllergenMapping, bool>>>()))
                .Returns(getIngrNutrientMapModel);
            repo.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientAllergenMapping, bool>>>()));
            var recordList = new Collection<IngredientAllergenMapping>()
            {
                new IngredientAllergenMapping() { Allergen = new AllergenMaster() { AllergenID = 1 } }
            };
            repo.Setup(r => r.Query(true)).Returns(recordList.AsQueryable());
            return repo;
        }
        #endregion

        #region Setup - IngredientSearchHistory Repository
        private Mock<IRepository<IngredientSearchHistory>> SetupIngredientSearchHistoryRepository()
        {
            var repo = new Mock<IRepository<IngredientSearchHistory>>();
            List<IngredientSearchHistory> recordList = GetIngredientSearchHistoryMockData();
            int userID = 1;
            string searchData = "test2";
            repo.Setup(r => r.GetManyAsync(o => o.UserID == userID, true)).ReturnsAsync(recordList);
            repo.Setup(r => r.GetMany(o => o.UserID == userID, true)).Returns(recordList);
            repo.Setup(r => r.GetMany(o => o.UserID == userID && o.SearchData == searchData)).Returns(recordList);
            repo.Setup(r => r.DeleteAsync(It.IsAny<System.Linq.Expressions.Expression<Func<IngredientSearchHistory, bool>>>()));
            repo.Setup(r => r.AddAsync(It.IsAny<IngredientSearchHistory>()));
            repo.Setup(r => r.UpdateAsync(It.IsAny<IngredientSearchHistory>()));
            return repo;
        }

        private List<IngredientSearchHistory> GetIngredientSearchHistoryMockData()
        {
            List<IngredientSearchHistory> recordList = new List<IngredientSearchHistory>();
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 1, UserID = 1, SearchData = "test1", SearchDate = DateTime.Now });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 2, UserID = 1, SearchData = "test2", SearchDate = DateTime.Now.AddMinutes(-1) });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 3, UserID = 1, SearchData = "test3", SearchDate = DateTime.Now.AddMinutes(-2) });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 4, UserID = 1, SearchData = "test4", SearchDate = DateTime.Now.AddMinutes(-3) });
            recordList.Add(new IngredientSearchHistory() { IngredientSearchID = 5, UserID = 1, SearchData = "test5", SearchDate = DateTime.Now.AddMinutes(-4) });
            return recordList;
        }
        #endregion

        #region Setup - UserMaster Repository
        private Mock<IRepository<UserMaster>> SetupUserMasterRepository()
        {
            int? userID = 1;
            var repo = new Mock<IRepository<UserMaster>>();
            repo.Setup(m => m.GetMany(o => o.UserID == Convert.ToInt32(userID), true)).Returns(new UserMaster[] { new UserMaster() { UserID = 1, DisplayName = "PIP Nelsson" } });
            userID = 2;
            repo.Setup(m => m.GetMany(o => o.UserID == Convert.ToInt32(userID), true)).Returns(new UserMaster[] { new UserMaster() { UserID = 2, DisplayName = "PIP" } });
            return repo;
        }
        #endregion

        #region Setup - Ingredient PartInfo
        private DataTable GetIngredientPartInfo()
        {
            DataTable table = new DataTable();
            table.Columns.Add("ActiveStatus", typeof(string));
            table.Columns.Add("RMDescription", typeof(string));
            table.Columns.Add("NutrientLink", typeof(string));
            table.Columns.Add("IngredientCategoryCode", typeof(string));
            table.Columns.Add("BrokerName", typeof(string));
            table.Columns.Add("SupplierName", typeof(string));
            table.Columns.Add("KosherCode", typeof(string));
            table.Columns.Add("InternalXReference", typeof(string));
            table.Columns.Add("ExternalXReference", typeof(string));
            table.Columns.Add("ONTResearchCode", typeof(string));
            table.Columns.Add("JDECode", typeof(decimal));
            table.Columns.Add("Activity", typeof(string));
            table.Columns.Add("SLCCode", typeof(string));
            table.Columns.Add("ANJCode", typeof(string));
            table.Columns.Add("LACCode", typeof(string));
            table.Columns.Add("ANACode", typeof(string));
            table.Columns.Add("CustomerCode", typeof(string));
            table.Columns.Add("ExclusivityAlert", typeof(string));

            table.Columns.Add("Allergen", typeof(string));
            table.Columns.Add("IngredientBreakDown", typeof(string));
            table.Columns.Add("IngredientList", typeof(string));

            table.Columns.Add("DataSourceNote", typeof(string));
            table.Columns.Add("AlertNote", typeof(string));
            table.Columns.Add("GeneralUpdate", typeof(string));
            table.Columns.Add("NutritionUpdate", typeof(string));
            table.Columns.Add("UpdateDate", typeof(string));
            table.Rows.Add("cP", "Testing Ingredient part info", "R2410009", "24", "Accurate Ing", "ACH Food",null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
         
            return table;
        }
        #endregion
    }
}