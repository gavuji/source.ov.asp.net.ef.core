using AutoMapper;
using FluentValidation;
using FM21.Core;
using FM21.Core.Model;
using FM21.Core.Validator;
using FM21.Data;
using FM21.Data.Infrastructure;
using FM21.Entities;
using FM21.Service.Caching;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;

namespace FM21.Service
{
    public class IngredientMasterService : BaseService, IIngredientMasterService
    {
        private readonly IRepository<IngredientCategoryMaster> ingredientCategoryRepository;
        private readonly IRepository<IngredientMaster> ingredientMasterRepository;
        private readonly IRepository<AlertMaster> alertMasterRepository;
        private readonly IRepository<SiteMaster> siteMasterRepository;
        private readonly IRepository<AutoGenerateCode> autoGenerateCodeRepository;
        private readonly IRepository<IngredientSupplierMapping> ingredientSupplierMappingRepository;
        private readonly IRepository<IngredientSitePartMapping> ingredientSitePartMappingRepository;
        private readonly IRepository<IngredientNutrientMapping> ingredientNutrientMapRepository;
        private readonly IRepository<IngredientAllergenMapping> ingredientAllergenMappingRepository;
        private readonly IRepository<IngredientSearchHistory> ingredientSearchHistoryRepository;
        private readonly IRepository<UserMaster> userMaster;
        private const int allowedIngredientCategoryForS30 = 11;
        private const int defaultIngredientCategory = 99;

        public IngredientMasterService(IServiceProvider provider, IExceptionHandler exceptionHandler, IMapper mapper, IUnitOfWork unitOfWork, ICacheProvider cacheProvider,
            IRepository<IngredientCategoryMaster> ingredientCategoryRepository, IRepository<IngredientMaster> ingredientMasterRepository, IRepository<AlertMaster> alertMasterRepository,
            IRepository<SiteMaster> siteMasterRepository, IRepository<AutoGenerateCode> autoGenerateCodeRepository, IRepository<IngredientSupplierMapping> ingredientSupplierMappingRepository,
            IRepository<IngredientSitePartMapping> ingredientSitePartMappingRepository, IRepository<IngredientNutrientMapping> ingredientNutrientMapRepository, 
            IRepository<IngredientSearchHistory> ingredientSearchHistoryRepository, IRepository<IngredientAllergenMapping> ingredientAllergenMappingRepository, IRepository<UserMaster> userMaster)
            :base(provider, exceptionHandler, mapper, unitOfWork, cacheProvider)
        {
            this.ingredientCategoryRepository = ingredientCategoryRepository;
            this.ingredientMasterRepository = ingredientMasterRepository;
            this.alertMasterRepository = alertMasterRepository;
            this.siteMasterRepository = siteMasterRepository;
            this.autoGenerateCodeRepository = autoGenerateCodeRepository;
            this.ingredientSupplierMappingRepository = ingredientSupplierMappingRepository;
            this.ingredientSitePartMappingRepository = ingredientSitePartMappingRepository;
            this.ingredientNutrientMapRepository = ingredientNutrientMapRepository;
            this.ingredientAllergenMappingRepository = ingredientAllergenMappingRepository;
            this.ingredientSearchHistoryRepository = ingredientSearchHistoryRepository;
            this.userMaster = userMaster;
        }

        #region Generate Code API
        public async Task<GeneralResponse<string>> GetAutoGeneratedJDECode(int ingredientCategoryCode)
        {
            var response = new GeneralResponse<string>();
            try
            {
                string prefix = "R" + ingredientCategoryCode;
                long lastNo = ingredientMasterRepository.GetMany(o => o.JDECode != null && o.JDECode.StartsWith(prefix), true)
                                            .Select(o => Convert.ToInt64(o.JDECode.Substring(3)))
                                            .DefaultIfEmpty(10000)
                                            .Max();
                response.Data = string.Format("{0}{1:00000}", prefix, ++lastNo);
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return await Task.FromResult(response);
        }

        public async Task<GeneralResponse<string>> GetAutoGeneratedS30Code(int siteID, int ingredientCategoryCode)
        {
            var response = new GeneralResponse<string>();
            try
            {
                if (ingredientCategoryCode != allowedIngredientCategoryForS30)
                {
                    response.Result = ResultType.Warning;
                    response.Message = localizer["msgInvalidCatForGenerates30Code"];
                }
                else
                {
                    var site = await siteMasterRepository.GetByIdAsync(siteID);
                    string prefix = "S30" + site.S30CodePrefix;
                    long lastNo = ingredientMasterRepository.GetMany(o => o.S30SubAssemblyCode.StartsWith(prefix), true)
                                                            .Select(o => Convert.ToInt64(o.S30SubAssemblyCode.Substring(4)))
                                                            .DefaultIfEmpty(0)
                                                            .Max();
                    response.Data = string.Format("{0}{1:00000}", prefix, ++lastNo);
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<Dictionary<string, string>>> GetAutoGeneratedRAndDCode()
        {
            var response = new GeneralResponse<Dictionary<string, string>>();
            try
            {
                response.Data = new Dictionary<string, string>();
                var lastCodeList = await autoGenerateCodeRepository.GetAllAsync(true);

                long lastCode = lastCodeList.Where(o => o.CodeType == CodeType.Research_J.ToString())
                            .Select(o => o.LastCodeValue)
                            .DefaultIfEmpty(0)
                            .FirstOrDefault();
                response.Data.Add(CodeType.Research_J.ToString(), string.Format("J{0:0000}", ++lastCode));

                lastCode = lastCodeList.Where(o => o.CodeType == CodeType.Research_K.ToString())
                            .Select(o => o.LastCodeValue)
                            .DefaultIfEmpty(0)
                            .FirstOrDefault();
                response.Data.Add(CodeType.Research_K.ToString(), string.Format("K{0:0000}", ++lastCode));

                lastCode = lastCodeList.Where(o => o.CodeType == CodeType.Research_V.ToString())
                            .Select(o => o.LastCodeValue)
                            .DefaultIfEmpty(0)
                            .FirstOrDefault();
                response.Data.Add(CodeType.Research_V.ToString(), string.Format("V{0:0000}", ++lastCode));

                lastCode = lastCodeList.Where(o => o.CodeType == CodeType.Research_RF.ToString())
                            .Select(o => o.LastCodeValue)
                            .DefaultIfEmpty(0)
                            .FirstOrDefault();
                response.Data.Add(CodeType.Research_RF.ToString(), string.Format("RF{0:0000}", ++lastCode));
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<int>> CheckCodeIsExist(string code)
        {
            var response = new GeneralResponse<int>() { Data = 0 };
            try
            {
                if (string.IsNullOrWhiteSpace(code))
                {
                    response.Result = ResultType.Warning;
                    response.Message = "Code " + localizer["msgCouldNotBeNullOrEmpty"];
                }
                else
                {
                    int ingredientID = ingredientSitePartMappingRepository.GetMany(o => o.PartNumber == code, true).Select(o => o.IngredientID).FirstOrDefault();
                    if (ingredientID > 0)
                    {
                        response.Data = ingredientID;
                        response.Result = ResultType.Warning;
                        response.Message = string.Format(localizer["msgDuplicateRecord"], "Code");
                    }
                    else
                    {
                        ingredientID = ingredientMasterRepository.GetMany(o => o.JDECode == code
                                                                        || o.S30SubAssemblyCode == code
                                                                        || o.ONTResearchCode == code
                                                                        || o.ANJResearchCode == code, true)
                                                .Select(o => o.IngredientID).FirstOrDefault();
                        if (ingredientID > 0)
                        {
                            response.Data = ingredientID;
                            response.Result = ResultType.Warning;
                            response.Message = string.Format(localizer["msgDuplicateRecord"], "Code");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return await Task.FromResult(response);
        }
        #endregion

        #region Insert, Update And Delete API
        public async Task<GeneralResponse<bool>> SaveNewIngredient(IngredientModel ingredientModel)
        {
            var response = new GeneralResponse<bool>();
            try
            {
                var validator = new IngredientMasterValidator(localizer);
                var results = validator.Validate(ingredientModel.Ingredient, ruleSet: "New");
                if (results.IsValid)
                {
                    IngredientMaster ingredient = await MakeIngredientMasterObject(ingredientModel);
                    if (ingredient != null)
                    {
                        ingredientMasterRepository.AddAsync(ingredient);

                        CodeType? resourceCodeType = null;
                        if (!string.IsNullOrEmpty(ingredient.ONTResearchCode))
                        {
                            if (ingredient.ONTResearchCode.StartsWith("J"))
                                resourceCodeType = CodeType.Research_J;
                            else if (ingredient.ONTResearchCode.StartsWith("K"))
                                resourceCodeType = CodeType.Research_K;
                            else if (ingredient.ONTResearchCode.StartsWith("V"))
                                resourceCodeType = CodeType.Research_V;
                            else if (ingredient.ONTResearchCode.StartsWith("RF"))
                                resourceCodeType = CodeType.Research_RF;
                        }

                        if (resourceCodeType != null && !UpdateAutoGenerateCodeTable(resourceCodeType, ingredient.ONTResearchCode))
                        {
                            response.Result = ResultType.Warning;
                            response.Message = localizer["msgSomethingWentWrong"];
                            return response;
                        }

                        await Save();
                        string info = string.Format(" with JDE Code: {0} ONT Resource Code: {1} S30 Code: {2}.", ingredient.JDECode, ingredient.ONTResearchCode, ingredient.S30SubAssemblyCode);
                        response.Message = localizer["msgInsertSuccessWithInfo", new string[] { "Ingredient", info }];
                    }
                    else
                    {
                        response.Result = ResultType.Warning;
                        response.Message = localizer["msgSomethingWentWrong"];
                    }
                }
                else
                {
                    response.Result = ResultType.Warning;
                    response.SetInfo(results);
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<bool>> UpdateIngredient(IngredientModel ingredientModel)
        {
            var response = new GeneralResponse<bool>() { Data = false };
            try
            {
                var validator = new IngredientMasterValidator(localizer);
                var results = validator.Validate(ingredientModel.Ingredient, ruleSet: "Edit,New");
                if (results.IsValid)
                {
                    var ingredient = await ingredientMasterRepository.GetByIdAsync(ingredientModel.Ingredient.IngredientID);
                    if (ingredient != null)
                    {
                        mapper.Map<IngredientMasterModel, IngredientMaster>(ingredientModel.Ingredient, ingredient);
                        ingredient.UpdatedBy = RequestUserID;
                        ingredient.UpdatedOn = DateTime.Now;
                        ingredient.IsAllergenPendingDocument = ingredientModel.Ingredient.AllergenInfo != null && ingredientModel.Ingredient.AllergenInfo.Any();
                        ingredientMasterRepository.UpdateAsync(ingredient);

                        response = await UpdateIngredientSitePart(ingredientModel.Ingredient);
                        if (!response.Data)
                        {
                            return response;
                        }
                        response = await UpdateIngredientSupplier(ingredient.IngredientID, ingredientModel.SupplierInfo);
                        if (!response.Data)
                        {
                            return response;
                        }
                        response = await UpdateIngredientNutrients(ingredient.IngredientID, ingredientModel);
                        if (!response.Data)
                        {
                            return response;
                        }
                        response = await UpdateIngredientAllergen(ingredient.IngredientID, ingredientModel.Ingredient.AllergenInfo);
                        if (!response.Data)
                        {
                            return response;
                        }
                        await Save();
                        response.Message = localizer["msgUpdateSuccess", new string[] { "Ingredient" }];
                    }
                }
                else
                {
                    response.Result = ResultType.Warning;
                    response.SetInfo(results);
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        private bool UpdateAutoGenerateCodeTable(CodeType? codeType, string codeValue)
        {
            try
            {
                if (codeType == null || string.IsNullOrWhiteSpace(codeValue))
                {
                    return true;
                }
                switch (codeType)
                {
                    case CodeType.Research_J:
                    case CodeType.Research_K:
                    case CodeType.Research_V:
                        codeValue = codeValue.Substring(1);
                        break;
                    case CodeType.Research_RF:
                        codeValue = codeValue.Substring(2);
                        break;
                }
                var objLastCode = autoGenerateCodeRepository.Get(o => o.CodeType == codeType.ToString());
                if (objLastCode != null)
                {
                    objLastCode.LastCodeValue = Convert.ToInt64(codeValue);
                    autoGenerateCodeRepository.UpdateAsync(objLastCode);
                }
                else
                {
                    autoGenerateCodeRepository.Add(new AutoGenerateCode()
                    {
                        CodeType = codeType.ToString(),
                        LastCodeValue = Convert.ToInt64(codeValue)
                    });
                }
            }
            catch (Exception ex)
            {
                exceptionHandler.LogError(ex);
                return false;
            }
            return true;
        }

        private async Task<IngredientMaster> MakeIngredientMasterObject(IngredientModel ingredientModel)
        {
            try
            {
                if (ingredientModel.Ingredient.IngredientCategoryCode == defaultIngredientCategory.ToString())
                {
                 
                    ingredientModel.Ingredient.IngredientCategoryID = ingredientCategoryRepository.Query(true)
                                                                      .FirstOrDefault(o => o.IngredientCategoryCode == defaultIngredientCategory.ToString()).IngredientCategoryID;
                }

                IngredientMaster ingredient = mapper.Map<IngredientMaster>(ingredientModel.Ingredient);
                ingredient.IsActive = true;
                ingredient.IsDeleted = false;
                ingredient.CreatedBy = RequestUserID;

                //Check JDE code duplication and re-generate if required
                if (!string.IsNullOrWhiteSpace(ingredient.JDECode) && ingredientMasterRepository.Any(o => o.JDECode == ingredient.JDECode))
                {
                    var response = await GetAutoGeneratedJDECode(Convert.ToInt32(ingredientModel.Ingredient.IngredientCategoryCode));
                    if (response.Result == ResultType.Success)
                    {
                        ingredient.JDECode = response.Data;
                    }
                    else
                    {
                        return null;
                    }
                }

                //Check S30 code duplication and re-generate if required
                if (!string.IsNullOrWhiteSpace(ingredient.S30SubAssemblyCode) && ingredientMasterRepository.Any(o => o.S30SubAssemblyCode == ingredient.S30SubAssemblyCode))
                {
                    int siteID = Convert.ToInt32(ingredient.S30SubAssemblyCode.Substring(3, 1));
                    var response = await GetAutoGeneratedS30Code(siteID, Convert.ToInt32(ingredientModel.Ingredient.IngredientCategoryCode));
                    if (response.Result == ResultType.Success)
                    {
                        ingredient.S30SubAssemblyCode = response.Data;
                    }
                    else
                    {
                        return null;
                    }
                }

                //Check R&D code duplication and re-generate if required
                if (!string.IsNullOrWhiteSpace(ingredient.ONTResearchCode) && ingredientMasterRepository.Any(o => o.ONTResearchCode == ingredient.ONTResearchCode))
                {
                    var response = await GetAutoGeneratedRAndDCode();
                    if (response.Result == ResultType.Success)
                    {
                        if (ingredient.ONTResearchCode.StartsWith("J"))
                        {
                            ingredient.ONTResearchCode = response.Data[CodeType.Research_J.ToString()];
                        }
                        else if (ingredient.ONTResearchCode.StartsWith("K"))
                        {
                            ingredient.ONTResearchCode = response.Data[CodeType.Research_K.ToString()];
                        }
                        else if (ingredient.ONTResearchCode.StartsWith("V"))
                        {
                            ingredient.ONTResearchCode = response.Data[CodeType.Research_V.ToString()];
                        }
                        else if (ingredient.ONTResearchCode.StartsWith("RF"))
                        {
                            ingredient.ONTResearchCode = response.Data[CodeType.Research_RF.ToString()];
                        }
                    }
                    else
                    {
                        return null;
                    }
                }

                if (!string.IsNullOrWhiteSpace(ingredientModel.Ingredient.LACCode))
                {
                    ingredient.IngredientSitePartMapping.Add(new IngredientSitePartMapping() { SiteID = SiteCode.LAC.GetHashCode(), PartNumber = ingredientModel.Ingredient.LACCode, CreatedBy = RequestUserID });
                }
                if (!string.IsNullOrWhiteSpace(ingredientModel.Ingredient.ANJCode))
                {
                    ingredient.IngredientSitePartMapping.Add(new IngredientSitePartMapping() { SiteID = SiteCode.ANJ.GetHashCode(), PartNumber = ingredientModel.Ingredient.ANJCode, CreatedBy = RequestUserID });
                }
                if (!string.IsNullOrWhiteSpace(ingredientModel.Ingredient.ANACode))
                {
                    ingredient.IngredientSitePartMapping.Add(new IngredientSitePartMapping() { SiteID = SiteCode.ANA.GetHashCode(), PartNumber = ingredientModel.Ingredient.ANACode, CreatedBy = RequestUserID });
                }
                if (!string.IsNullOrWhiteSpace(ingredientModel.Ingredient.SLCCode))
                {
                    ingredient.IngredientSitePartMapping.Add(new IngredientSitePartMapping() { SiteID = SiteCode.SLC.GetHashCode(), PartNumber = ingredientModel.Ingredient.SLCCode, CreatedBy = RequestUserID });
                }

                if (ingredientModel.SupplierInfo != null && ingredientModel.SupplierInfo.Count > 0)
                {
                    ingredient.IngredientSupplierMapping = mapper.Map<ICollection<IngredientSupplierModel>, ICollection<IngredientSupplierMapping>>(ingredientModel.SupplierInfo);
                }
                if (ingredientModel.NutrientInfo != null && ingredientModel.NutrientInfo.Count > 0)
                {
                    ingredient.IngredientNutrientMapping = mapper.Map<ICollection<NutrientModel>, ICollection<IngredientNutrientMapping>>(ingredientModel.NutrientInfo);
                }
                if (ingredientModel.Ingredient.AllergenInfo != null && ingredientModel.Ingredient.AllergenInfo.Any())
                {
                    ingredientModel.Ingredient.IsAllergenPendingDocument = false;
                    List<IngredientAllergenMapping> lstIngredientAllergenMapping = new List<IngredientAllergenMapping>();
                    ingredientModel.Ingredient.AllergenInfo.ToList().ForEach(allergenID =>
                    {
                        IngredientAllergenMapping objAllergen = new IngredientAllergenMapping();
                        objAllergen.AllergenID = allergenID;
                        objAllergen.CreatedBy = RequestUserID;
                        lstIngredientAllergenMapping.Add(objAllergen);
                    });
                    ingredient.IngredientAllergenMapping = lstIngredientAllergenMapping;
                }
                else
                {
                    ingredient.IsAllergenPendingDocument = true;
                }
                return ingredient;
            }
            catch (Exception ex)
            {
                throw(ex);
            }
        }

        private async Task<GeneralResponse<bool>> UpdateIngredientSitePart(IngredientMasterModel ingredient)
        {
            var response = new GeneralResponse<bool>() { Data = false };
            try
            {
                Dictionary<int, string> lstPartNumber = new Dictionary<int, string>();
                if (!string.IsNullOrWhiteSpace(ingredient.LACCode))
                {
                    lstPartNumber.Add(SiteCode.LAC.GetHashCode(), ingredient.LACCode);
                }
                if (!string.IsNullOrWhiteSpace(ingredient.ANJCode))
                {
                    lstPartNumber.Add(SiteCode.ANJ.GetHashCode(), ingredient.ANJCode);
                }
                if (!string.IsNullOrWhiteSpace(ingredient.ANACode))
                {
                    lstPartNumber.Add(SiteCode.ANA.GetHashCode(), ingredient.ANACode);
                }
                if (!string.IsNullOrWhiteSpace(ingredient.SLCCode))
                {
                    lstPartNumber.Add(SiteCode.SLC.GetHashCode(), ingredient.SLCCode);
                }

                if (lstPartNumber.Count > 0)
                {
                    var arrSiteID = lstPartNumber.Select(o => o.Key).ToArray();
                    await ingredientSitePartMappingRepository.DeleteAsync(o => o.IngredientID == ingredient.IngredientID && !arrSiteID.Contains(o.SiteID));

                    lstPartNumber.ToList().ForEach(partNumber =>
                    {
                        var objPartNumber = ingredientSitePartMappingRepository.Get(x => x.IngredientID == ingredient.IngredientID && x.SiteID == partNumber.Key);
                        if (objPartNumber != null)
                        {
                            objPartNumber.PartNumber = partNumber.Value;
                            objPartNumber.UpdatedBy = RequestUserID;
                            objPartNumber.UpdatedOn = DateTime.Now;
                            ingredientSitePartMappingRepository.UpdateAsync(objPartNumber);
                        }
                        else
                        {
                            IngredientSitePartMapping newPartNumber = new IngredientSitePartMapping();
                            newPartNumber.IngredientID = ingredient.IngredientID;
                            newPartNumber.SiteID = partNumber.Key;
                            newPartNumber.PartNumber = partNumber.Value;
                            newPartNumber.CreatedBy = RequestUserID;
                            ingredientSitePartMappingRepository.AddAsync(newPartNumber);
                        }
                    });
                }
                else
                {
                    await ingredientSitePartMappingRepository.DeleteAsync(o => o.IngredientID == ingredient.IngredientID);
                }
                response.Data = true;
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        private async Task<GeneralResponse<bool>> UpdateIngredientSupplier(int ingredientID, List<IngredientSupplierModel> lstSuppliers)
        {
            var response = new GeneralResponse<bool>() { Data = false };
            try
            {
                if (lstSuppliers != null && lstSuppliers.Count > 0)
                {
                    var arrSupplierID = lstSuppliers.Select(o => o.IngredientSupplierID).ToArray();
                    await ingredientSupplierMappingRepository.DeleteAsync(o => o.IngredientID == ingredientID && !arrSupplierID.Contains(o.IngredientSupplierID));

                    lstSuppliers.ForEach(supplier =>
                    {
                        var objSupplier = ingredientSupplierMappingRepository.Get(x => x.IngredientID == ingredientID && x.IngredientSupplierID == supplier.IngredientSupplierID);
                        if (objSupplier != null)
                        {
                            mapper.Map<IngredientSupplierModel, IngredientSupplierMapping>(supplier, objSupplier);
                            objSupplier.UpdatedBy = RequestUserID;
                            objSupplier.UpdatedOn = DateTime.Now;
                            ingredientSupplierMappingRepository.UpdateAsync(objSupplier);
                        }
                        else
                        {
                            IngredientSupplierMapping newSupplier = new IngredientSupplierMapping();
                            mapper.Map<IngredientSupplierModel, IngredientSupplierMapping>(supplier, newSupplier);
                            newSupplier.IngredientID = ingredientID;
                            newSupplier.CreatedBy = RequestUserID;
                            ingredientSupplierMappingRepository.AddAsync(newSupplier);
                        }
                    });
                }
                else
                {
                    await ingredientSupplierMappingRepository.DeleteAsync(o => o.IngredientID == ingredientID);
                }
                response.Data = true;
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        private async Task<GeneralResponse<bool>> UpdateIngredientNutrients(int ingredientID, IngredientModel ingredientModel)
        {
            var response = new GeneralResponse<bool>() { Data = false };
            bool IsValid = true;
            try
            {
                if (ingredientModel.NutrientInfo != null && ingredientModel.NutrientInfo.Count > 0)
                {
                    var arrNutrientID = ingredientModel.NutrientInfo.Select(o => o.NutrientId).ToArray();
                    await ingredientNutrientMapRepository.DeleteAsync(o => o.IngredientID == ingredientID && !arrNutrientID.Contains(o.NutrientID));

                    ingredientModel.NutrientInfo.ForEach(ingNutrientMap =>
                    {
                        var validator = new IngredientNutrientValidator(localizer);
                        var results = validator.Validate(ingNutrientMap, ruleSet: "New");
                        if (!results.IsValid)
                        {
                            response.Data = IsValid = false;
                            response.SetInfo(results);
                        }
                    });
                    if (IsValid)
                    {
                        ingredientModel.NutrientInfo.ForEach(ingNutrientMap =>
                        {
                            var ingNutrients = ingredientNutrientMapRepository.Get(x => x.IngredientID == ingredientID && x.NutrientID == ingNutrientMap.NutrientId);
                            if (ingNutrients != null)
                            {
                                mapper.Map<NutrientModel, IngredientNutrientMapping>(ingNutrientMap, ingNutrients);
                                ingNutrients.UpdatedBy = RequestUserID;
                                ingNutrients.UpdatedOn = DateTime.Now;
                                ingredientNutrientMapRepository.UpdateAsync(ingNutrients);
                            }
                            else
                            {
                                IngredientNutrientMapping newNutrient = new IngredientNutrientMapping();
                                mapper.Map<NutrientModel, IngredientNutrientMapping>(ingNutrientMap, newNutrient);
                                newNutrient.IngredientID = ingredientID;
                                newNutrient.CreatedBy = RequestUserID;
                                ingredientNutrientMapRepository.AddAsync(newNutrient);
                            }
                        });
                        response.Data = true;
                    }
                }
                else
                {
                    await ingredientNutrientMapRepository.DeleteAsync(o => o.IngredientID == ingredientID);
                    response.Data = true;
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            await Task.FromResult(response);
            return response;
        }

        private async Task<GeneralResponse<bool>> UpdateIngredientAllergen(int ingredientID, int[] arrAllergenInfo)
        {
            var response = new GeneralResponse<bool>() { Data = false };
            try
            {
                if (arrAllergenInfo != null && arrAllergenInfo.Any())
                {
                    await ingredientAllergenMappingRepository.DeleteAsync(o => o.IngredientID == ingredientID && !arrAllergenInfo.Contains(o.AllergenID));

                    arrAllergenInfo.ToList().ForEach(allergenID =>
                    {
                        var objAllergen = ingredientAllergenMappingRepository.Get(x => x.IngredientID == ingredientID && x.AllergenID == allergenID);
                        if (objAllergen != null)
                        {
                            objAllergen.UpdatedBy = RequestUserID;
                            objAllergen.UpdatedOn = DateTime.Now;
                            ingredientAllergenMappingRepository.UpdateAsync(objAllergen);
                        }
                        else
                        {
                            IngredientAllergenMapping newAllergen = new IngredientAllergenMapping();
                            newAllergen.IngredientID = ingredientID;
                            newAllergen.AllergenID = allergenID;
                            newAllergen.CreatedBy = RequestUserID;
                            ingredientAllergenMappingRepository.AddAsync(newAllergen);
                        }
                    });
                }
                else
                {
                    await ingredientAllergenMappingRepository.DeleteAsync(o => o.IngredientID == ingredientID);
                }
                response.Data = true;
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<bool>> DeleteIngredient(int id)
        {
            var response = new GeneralResponse<bool>();
            try
            {
                var obj = await ingredientMasterRepository.GetByIdAsync(id);
                if (obj != null)
                {
                    obj.UpdatedBy = RequestUserID;
                    obj.UpdatedOn = DateTime.Now;
                    obj.IsDeleted = true;
                    ingredientMasterRepository.UpdateAsync(obj);
                    await Save();
                    response.Message = localizer["msgDeleteSuccess", new string[] { "Ingredient" }];
                }
                else
                {
                    response.Result = ResultType.Warning;
                    response.Message = localizer["msgRecordNotExist", new string[] { "Ingredient" }];
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<bool>> UpdateIngredientSearchHistory(int userID, string searchData)
        {
            var response = new GeneralResponse<bool>();
            try
            {
                if (ingredientSearchHistoryRepository.GetMany(o => o.UserID == userID, true).Count() >= 5)
                {
                    var firstSearchRecord = ingredientSearchHistoryRepository.GetMany(o => o.UserID == userID, true).OrderBy(o => o.SearchDate).First();
                    await ingredientSearchHistoryRepository.DeleteAsync(o => o.IngredientSearchID == firstSearchRecord.IngredientSearchID);
                }

                var ingredientSearch = ingredientSearchHistoryRepository.GetMany(o => o.UserID == userID && o.SearchData == searchData).FirstOrDefault();
                if (ingredientSearch == null)
                {
                    var oIngredientSearch = new IngredientSearchHistory() { UserID = userID, SearchData = searchData, SearchDate = DateTime.Now };
                    ingredientSearchHistoryRepository.AddAsync(oIngredientSearch);
                }
                else
                {
                    ingredientSearch.SearchDate = DateTime.Now;
                    ingredientSearchHistoryRepository.UpdateAsync(ingredientSearch);
                }
                await Save();
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }
        #endregion

        #region Retrieve API
        public async Task<GeneralResponse<ICollection<IngredientCategoryMaster>>> GetAllIngredientCategory()
        {
            var response = new GeneralResponse<ICollection<IngredientCategoryMaster>>();
            try
            {
                response.Data = (await ingredientCategoryRepository.GetManyAsync(o => o.IsActive && !o.IsDeleted, true))
                                            .OrderBy(o => o.IngredientCategoryCode).ToList();
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<ICollection<AlertMaster>>> GetAlertMasterData(string alertType)
        {
            var response = new GeneralResponse<ICollection<AlertMaster>>();
            try
            {
                alertType = alertType.ToLower();
                response.Data = (await alertMasterRepository.GetManyAsync(o => o.IsActive && !o.IsDeleted && o.AlertType.ToLower() == alertType, true))
                                            .OrderBy(o => o.AlertID).ToList();
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<IngredientModel>> GetIngredientByIngredientID(int ingredientID)
        {
            var response = new GeneralResponse<IngredientModel>();
            try
            {
                if (ingredientID == 0)
                {
                    response.Data = new IngredientModel()
                    {
                        Ingredient = new IngredientMasterModel()
                    };
                }
                else
                {
                    var obj = ingredientMasterRepository.Query(true)
                                                        .Where(o => o.IngredientID == ingredientID)
                                                        .Include(o => o.IngredientCategory)
                                                        .Include(o => o.IngredientAllergenMapping)
                                                        .Include(o => o.IngredientSitePartMapping)
                                                        .FirstOrDefault();
                    if (obj != null)
                    {
                        response.Data = new IngredientModel();
                        response.Data.Ingredient = mapper.Map<IngredientMaster, IngredientMasterModel>(obj);

                        response.Data.Ingredient.CreatedByInfo = GetUserInfo(obj.CreatedBy, obj.CreatedOn);
                        response.Data.Ingredient.UpdatedByInfo = GetUserInfo(obj.UpdatedBy, obj.UpdatedOn);

                        response.Data.Ingredient.AllergenInfo = ingredientAllergenMappingRepository.GetMany(o => o.IngredientID == ingredientID, true)
                                                                            .Select(o => o.AllergenID)
                                                                            .ToArray();

                        response.Data.Ingredient.Allergen = string.Join(", ", ingredientAllergenMappingRepository.Query(true)
                                                                            .Where(o => o.IngredientID == ingredientID)
                                                                            .Include(o => o.Allergen)
                                                                            .Select(o => o.Allergen.AllergenName)); 
                    }
                    else
                    {
                        response.Message = localizer["msgRecordNotExist", new string[] { "Ingredient" }];
                    }
                }
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return await Task.FromResult(response);
        }

        public async Task<GeneralResponse<DataTable>> GetSupplierByIngredientID(int ingredientID)
        {
            var response = new GeneralResponse<DataTable>();
            try
            {
                response.Data = await ingredientMasterRepository.GetFromStoredProcedureAsync("GetSupplierByIngredientID", ("ingredientID", ingredientID));
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<DataTable>> GetNutrientByIngredientID(int ingredientID)
        {
            var response = new GeneralResponse<DataTable>();
            try
            {
                response.Data = await ingredientMasterRepository.GetFromStoredProcedureAsync("GetNutrientByIngredientID", ("ingredientID", ingredientID));
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<PagedTableResponse<DataTable>> SearchIngredient(IngredientSearchFilter searchFilter)
        {
            var response = new PagedTableResponse<DataTable>() { CurrentPage = searchFilter.PageIndex, PageSize = searchFilter.PageSize };
            try
            {
                DataTable dtData = await ingredientMasterRepository.GetFromStoredProcedureAsync("SearchIngredient",
                            ("searchCol1", searchFilter.SearchField1), ("searchCol1Value", searchFilter.SearchText1),
                            ("searchCol2", searchFilter.SearchField2), ("searchCol2Value", searchFilter.SearchText2), ("searchCol2Condition", searchFilter.SearchCondition2),
                            ("searchCol3", searchFilter.SearchField3), ("searchCol3Value", searchFilter.SearchText3), ("searchCol3Condition", searchFilter.SearchCondition3),
                            ("displayColumn", searchFilter.DisplayColumn), ("siteID", searchFilter.SiteID), ("sortColumn", searchFilter.SortColumn), ("sortDirection", searchFilter.SortDirection),
                            ("nutrientColumn", searchFilter.NutrientColumn), ("rMSatusColumn", searchFilter.RMSatusColumn), ("ingColumn", searchFilter.IngredientColumn),
                            ("ingAllergen", searchFilter.AllergenColumn), ("supplierColumn", searchFilter.SupplierColumn), ("unitMeasurment", searchFilter.UnitMeasurment));

                //Pagination
                response.RowCount = dtData.Rows.Count;
                response.PageCount = (int)Math.Ceiling((double)response.RowCount / response.PageSize);
                var skip = (response.CurrentPage - 1) * response.PageSize;
                var data = dtData.Rows.Cast<DataRow>().Skip(skip).Take(response.PageSize);
                if (data != null && data.Any())
                {
                    response.Data = data.CopyToDataTable();
                }
               
                //Update Search History
                string searchData = string.Format("{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}", searchFilter.SearchText1??"", searchFilter.SearchField1??"", 
                    searchFilter.SearchCondition2??"", 
                    searchFilter.SearchText2 ?? "", searchFilter.SearchField2 ?? "", searchFilter.SearchCondition3 ?? "", 
                    searchFilter.SearchText3 ?? "", searchFilter.SearchField3 ?? ""); 
                await UpdateIngredientSearchHistory(Convert.ToInt32(RequestUserID), searchData);
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<ICollection<IngredientSearchHistory>>> GetIngredientSearchHistory(int userID)
        {
            var response = new GeneralResponse<ICollection<IngredientSearchHistory>>();
            try
            {
                response.Data = (await ingredientSearchHistoryRepository.GetManyAsync(o => o.UserID == userID, true))
                                            .OrderByDescending(o => o.SearchDate).ToList();
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<DataTable>> GetIngredientReportData(string reportType, string siteIDs, string productTypeID)
        {
            var response = new GeneralResponse<DataTable>();
            try
            {
                response.Data = await ingredientMasterRepository.GetFromStoredProcedureAsync("GetIngredientReport",
                            ("reportType", reportType), ("siteIDs", siteIDs??""), ("productTypeID", productTypeID ?? ""));
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<DataTable>> GetIngredientCustomReportData(IngredientReportFilter searchReportFilter)
        {
            var response = new GeneralResponse<DataTable>();
            try
            {
                response.Data = await ingredientMasterRepository.GetFromStoredProcedureAsync("GetIngredientCustomReport",
                                ("nutrientColumn", searchReportFilter.NutrientColumn ?? ""), ("rMSatusColumn", searchReportFilter.RMSatusColumn ?? ""), 
                                ("ingColumn", searchReportFilter.IngredientColumn ?? ""), ("ingAllergen", searchReportFilter.AllergenColumn ?? ""),
                                ("supplierColumn", searchReportFilter.SupplierColumn?? ""), ("unitMeasurment", searchReportFilter.UnitMeasurment ?? ""), 
                                ("siteIDs", searchReportFilter.siteIDs ?? ""));
                
                int[] selectedSiteID = searchReportFilter.siteIDs.Split(',').Select(x => Convert.ToInt32(x)).ToArray();
                List<string> sortedColumns = new List<string>();
                var siteList = siteMasterRepository.GetMany(o => selectedSiteID.Contains(o.SiteID), true);
                string[] siteWiseCol = (searchReportFilter.SupplierColumn??"").Split(',');
                for (int i = 0; i < searchReportFilter.DBColumn.Count; i++)
                {
                    if (siteWiseCol.Contains(searchReportFilter.DBColumn[i]))
                    {
                        foreach (var site in siteList)
                        {
                            sortedColumns.Add(string.Format("{0}_{1}", site.SiteCode, searchReportFilter.DBColumn[i]));
                        }
                    }
                    else if(searchReportFilter.DBColumn[i] == "PrimaryUnitWeight")
                    {
                        sortedColumns.Add(searchReportFilter.DBColumn[i]);
                        sortedColumns.Add("UOM");
                    }
                    else
                    {
                        sortedColumns.Add(searchReportFilter.DBColumn[i]);
                    }
                }
                response.Data.SetColumnsOrder(sortedColumns.ToArray());
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<FormulaIngredientAttributes>> GetIngredientForFormula(IngredientReportFilter searchReportFilter)
        {
            var response = new GeneralResponse<FormulaIngredientAttributes>() { Data = new FormulaIngredientAttributes() };
            try
            {
                int nutrientColCount = (string.IsNullOrEmpty(searchReportFilter.NutrientColumn) ? 0 : searchReportFilter.NutrientColumn.Split(',').Count());
                if (!(searchReportFilter.SupplierColumn?? "").Split(',').Contains("Price"))
                {
                    searchReportFilter.SupplierColumn += string.IsNullOrEmpty(searchReportFilter.SupplierColumn) ? "Price" : ",Price";
                    searchReportFilter.DBColumn.Add("Price");
                }
                if (!(searchReportFilter.IngredientColumn?? "").Split(',').Contains("NutrientActivity"))
                {
                    searchReportFilter.IngredientColumn += string.IsNullOrEmpty(searchReportFilter.IngredientColumn) ? "NutrientActivity" : ",NutrientActivity";
                    searchReportFilter.DBColumn.Add("NutrientActivity");
                }
                if (!(searchReportFilter.IngredientColumn?? "").Split(',').Contains("CalTotal"))
                {
                    searchReportFilter.IngredientColumn += string.IsNullOrEmpty(searchReportFilter.IngredientColumn) ? "CalTotal" : ",CalTotal";
                    searchReportFilter.DBColumn.Add("CalTotal");
                }
                if (!(searchReportFilter.IngredientColumn?? "").Split(',').Contains("ClaimAmountUnit"))
                {
                    searchReportFilter.IngredientColumn += string.IsNullOrEmpty(searchReportFilter.IngredientColumn) ? "ClaimAmountUnit" : ",ClaimAmountUnit";
                    searchReportFilter.DBColumn.Add("ClaimAmountUnit");
                }
                if (!(searchReportFilter.AllergenColumn?? "").Split(',').Contains("Allergen"))
                {
                    searchReportFilter.AllergenColumn += string.IsNullOrEmpty(searchReportFilter.AllergenColumn) ? "Allergen" : ",Allergen";
                    searchReportFilter.DBColumn.Add("Allergen");
                }

                string[] fixNutrientCol = new string[] { NutrientName.Moisture, NutrientName.FATkcalFactor, NutrientName.TotalFat, 
                    NutrientName.CarbkcalFactor, NutrientName.TotalCarbohydrate, NutrientName.PROkcalFactor, NutrientName.Protein, 
                    NutrientName.NPNkcalFactor, NutrientName.NonProximateNutrient, NutrientName.SolubleFiber };
                searchReportFilter.NutrientColumn += (!string.IsNullOrWhiteSpace(searchReportFilter.NutrientColumn) ? "," : string.Empty) + string.Join(",", fixNutrientCol);
                for (int i = (nutrientColCount+1); i <= (nutrientColCount+fixNutrientCol.Count()); i++)
                {
                    searchReportFilter.DBColumn.Add("NutrientValue" + i);
                }

                var dtIngredientAtrributes = await ingredientMasterRepository.GetFromStoredProcedureAsync("GetIngredientForFormula",
                                ("nutrientColumn", searchReportFilter.NutrientColumn ?? ""), ("rMSatusColumn", searchReportFilter.RMSatusColumn ?? ""),
                                ("ingColumn", searchReportFilter.IngredientColumn ?? ""), ("ingAllergen", searchReportFilter.AllergenColumn ?? ""),
                                ("supplierColumn", searchReportFilter.SupplierColumn ?? ""), ("unitMeasurment", searchReportFilter.UnitMeasurment ?? ""),
                                ("siteID", searchReportFilter.siteIDs ?? ""), ("IngredientIDs", searchReportFilter.IngredientIDs ?? ""));

                int[] selectedSiteID = searchReportFilter.siteIDs.Split(',').Select(x => Convert.ToInt32(x)).ToArray();
                List<string> sortedColumns = new List<string>();
                var siteList = siteMasterRepository.GetMany(o => selectedSiteID.Contains(o.SiteID), true);
                string[] siteWiseCol = (searchReportFilter.SupplierColumn ?? "").Split(',');
                for (int i = 0; i < searchReportFilter.DBColumn.Count; i++)
                {
                    if (siteWiseCol.Contains(searchReportFilter.DBColumn[i]))
                    {
                        foreach (var site in siteList)
                        {
                            sortedColumns.Add(string.Format("{0}_{1}", site.SiteCode, searchReportFilter.DBColumn[i]));
                        }
                    }
                    else if (searchReportFilter.DBColumn[i] == "PrimaryUnitWeight")
                    {
                        sortedColumns.Add(searchReportFilter.DBColumn[i]);
                        sortedColumns.Add("UOM");
                    }
                    else
                    {
                        sortedColumns.Add(searchReportFilter.DBColumn[i]);
                    }
                }
                sortedColumns.AddRange(new string[] { "DvOfActiveNutrient", "IsDVValue", "IngredientID" });
                dtIngredientAtrributes.SetColumnsOrder(sortedColumns.ToArray());
                foreach (string col in fixNutrientCol)
                {
                    dtIngredientAtrributes.Columns["NutrientValue" + (++nutrientColCount)].ColumnName = col.Replace(" ", "_").Replace("-", "_");
                }
                response.Data.Attributes = dtIngredientAtrributes;

                int[] ingredientIDs = dtIngredientAtrributes.Rows.Cast<DataRow>().Select(dr => Convert.ToInt32(dr["IngredientID"])).ToArray();
                var allergens  = ingredientAllergenMappingRepository.Query(true)
                                .Where(o => ingredientIDs.Contains(o.IngredientID))
                                .Include(o => o.Allergen);
                response.Data.AllergenCode = string.Join("", allergens.Select(o => o.Allergen.AllergenCode).Distinct().ToArray());
                response.Data.AllergenName = string.Join(", ", allergens.Select(o => o.Allergen.AllergenName).Distinct().ToArray());
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public async Task<GeneralResponse<DataTable>> GetIngredientPartInfo(int ingredientID)
        {
            var response = new GeneralResponse<DataTable>();
            try
            {
                response.Data = await ingredientMasterRepository.GetFromStoredProcedureAsync("GetIngredientPartInfo", ("ingredientID", ingredientID));
            }
            catch (Exception ex)
            {
                response.Exception = ex;
                exceptionHandler.LogError(ex);
            }
            return response;
        }

        public string GetUserInfo(int? userID, DateTime? date)
        {
            string userInfo = string.Empty;
            if (userID > 0)
            {
               var objUser = userMaster.GetMany(o => o.UserID == Convert.ToInt32(userID), true).FirstOrDefault();
                if (objUser != null)
                {
                    if (objUser.DisplayName.Contains(" "))
                    {
                        userInfo = string.Format("{0}{1} ", objUser.DisplayName.Split(' ')[0].Substring(0, 1), objUser.DisplayName.Split(' ')[1].Substring(0, 1));
                    }
                    else
                    {
                        userInfo = string.Format("{0} ", objUser.DisplayName.Substring(0, 1));
                    }
                }
            }
            if(date != null)
            {
                userInfo += Convert.ToDateTime(date).ToString("MM/dd/yy");
            }
            return userInfo;
        }
        #endregion
    }
}